{
	"info": {
		"_postman_id": "c575443f-b5cb-4014-b418-672c36170b2f",
		"name": "IZGW 2.0 Integtration Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "940288",
		"_collection_link": "https://cloudy-sunset-429868.postman.co/workspace/IZ-Gateway~a583eb4f-68db-4044-b8cf-d251024eca35/collection/940288-c575443f-b5cb-4014-b418-672c36170b2f?action=share&source=collection_link&creator=940288"
	},
	"item": [
		{
			"name": "Working",
			"item": [
				{
					"name": "Smoke Test",
					"item": [
						{
							"name": "Check Build ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Set build and timestamp in global variables to check the build version\r",
											"var build = new RegExp(pm.globals.get(\"build\") || \".*\");\r",
											"var timestamp = new RegExp(pm.globals.get(\"timestamp\") || \".*\");\r",
											"pm.test(\"Must be a 2.x build\", function() {\r",
											"    var theBuild = responseBody.match(/^\\s*Build: izgateway-2\\.$/m);\r",
											"});\r",
											"pm.test(\"Build ID to match \" + build, function() {\r",
											"    var theBuild = responseBody.match(/^\\s*Build: (.*)$/m);\r",
											"    pm.expect(theBuild[1]).matches(build);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamp to match \" + timestamp, function() {\r",
											"    var theTimestamp = responseBody.match(/^\\s*Timestamp: (.*)$/m);\r",
											"    pm.expect(theTimestamp[1]).matches(timestamp);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Not-Admin",
										"value": "true",
										"description": "Leave it this way to verify access control functionality."
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/build.txt",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{prefix}}",
									"path": [
										"build.txt"
									]
								},
								"description": "Retrieve the build information using\n\nGET /rest/build.txt\n\nVerify the build name and timestamp match the expected values in global variables."
							},
							"response": []
						},
						{
							"name": "Get Client IP Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Preserve local system's external IP Address for later use\r",
											"pm.collectionVariables.set(\"myIpAddr\", pm.response.json().ip)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/icanhazip",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{prefix}}",
									"path": [
										"icanhazip"
									]
								},
								"description": "Retrieve the test system's IP Address to verify log response values by calling a third party IP Address reporting tool and storing the value in the collection variables under myIpAddr."
							},
							"response": []
						},
						{
							"name": "TC_01a Connectivity Test is Successful to IZGW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var echoBack;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is same as sent\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var request = utils.removeNS(xml2Json(pm.request.body));\r",
											"    echoBack = request['Envelope']['Body']['ConnectivityTestRequest']['EchoBack'];\r",
											"    pm.expect(response['Envelope']['Body']['ConnectivityTestResponse']['EchoBack']).to.eql(echoBack);\r",
											"});\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, BASE_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"\r",
											"        pm.test(\"Logs are an array of objects\", function () {\r",
											"            pm.expect(logs).to.be.an('array');\r",
											"            pm.expect(logs[0]).to.be.an(\"object\");\r",
											"        });\r",
											"\r",
											"        pm.test(\"There are no ERROR, WARN, stack_trace or SOAPFaults in logs\", function () {\r",
											"            for (log of logs) {\r",
											"                if (!log.level.match(/INFO|DEBUG|TRACE/)) {\r",
											"                    console.log({ \"Failing Log Entry: \": log });\r",
											"                }\r",
											"                pm.expect(log.level).to.match(/INFO|DEBUG|TRACE/);\r",
											"                pm.expect(typeof log.stack_trace ).eql(\"undefined\");\r",
											"                if ('ws_response_message' in log) {\r",
											"                    pm.expect(log.ws_response_message.soapFault, 'response SOAP fault must be null').to.be.eql(null);\r",
											"                }\r",
											"                if ('ws_request_message' in log) {\r",
											"                    pm.expect(log.ws_request_message.soapFault, 'request SOAP fault must be null').to.be.eql(null);\r",
											"                }\r",
											"            }\r",
											"        });\r",
											"        wsData = utils.getWsRequest(logs);\r",
											"        pm.test(\"First log EndPoint Type is INBOUND to SERVER\", function () {\r",
											"            pm.expect(wsData[0].ws_request_message.direction).to.eql(\"INBOUND\");\r",
											"            pm.expect(wsData[0].ws_request_message.endpointType).to.eql(\"SERVER\");\r",
											"        });\r",
											"\r",
											"        pm.test(\"First log MessageID Matches inbound MessageID\", function () {\r",
											"            pm.expect(wsData[0].ws_request_message.soapHeaders.MessageID).to.eql(pm.environment.get(\"testMessageId\"));\r",
											"        });\r",
											"        // NOTE: You have to pay attention to the format that IZGW Serializes to in constructing the message!\r",
											"        // The body of this test is carefully structured for an exact match of the expected output format.\r",
											"        pm.test(\"First log payload matches inbound body\", function () {\r",
											"            var payload = wsData[0].ws_request_message.payload.trim().replace(/[\\r]+/g,\"\");\r",
											"            var body = pm.request.body.raw.trim().replace(/[\\r]+/g,\"\");\r",
											"            pm.expect(payload).to.eql(body);\r",
											"        });\r",
											"\r",
											"        wsData = utils.getWsResponse(logs);\r",
											"        pm.test(\"Second log Response is OUTBOUND SERVER\", function () {\r",
											"            pm.expect(wsData[0].ws_response_message.direction).to.eql(\"OUTBOUND\");\r",
											"            pm.expect(wsData[0].ws_response_message.endpointType).to.eql(\"SERVER\");\r",
											"        });\r",
											"        txData = utils.getTxData(logs);\r",
											"        pm.test(\"TxData log to have transactionData.requestHL7Message == request.echoBack\", function() {\r",
											"            pm.expect(txData[0]).to.have.nested.property('transactionData.requestHL7Message');\r",
											"            pm.expect(txData[0].transactionData.requestHL7Message).to.be.eql(echoBack)\r",
											"        });\r",
											"\r",
											"        pm.test(\"TxData log to have transactionData.responseHL7Message == request.echoBack\", function() {\r",
											"            pm.expect(txData[0]).to.have.nested.property('transactionData.responseHL7Message');\r",
											"            pm.expect(txData[0].transactionData.responseHL7Message).to.be.eql(echoBack)\r",
											"        });\r",
											"\r",
											"        utils.testLogs(logs, pm, TX_SLA);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
											"try {\r",
											"    utils.checkNamespaces(pm);\r",
											"} catch (err) {\r",
											"    console.log(err.stack);\r",
											"    throw err;\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:iis=\"urn:cdc:iisb:2014\">\r\n    <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n        <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:ConnectivityTestRequest</wsa:Action>\r\n        <wsa:MessageID>TC_01a</wsa:MessageID>\r\n        <wsa:To>http://www.w3.org/2005/08/addressing/anonymous</wsa:To>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <iis:ConnectivityTestRequest>\r\n            <iis:EchoBack>Wishing {{host}}:{{port}} an Audacious Hello at {{$isoTimestamp}}!</iis:EchoBack>\r\n        </iis:ConnectivityTestRequest>\r\n    </soap:Body>\r\n</soap:Envelope>\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_03a Retrieval of WSDL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is correct\", function () {\r",
											"    var contentType = null;\r",
											"    for (header in pm.response.headers.members) {\r",
											"        if (pm.response.headers.members[header].key == \"Content-Type\") {\r",
											"            contentType = pm.response.headers.members[header].value;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(contentType).to.match(/[\\/+]xml/);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains WSDL definitions element\", function () {\r",
											"    pm.expect(responseBody).to.match(/\\/(<[a-zA-Z0-9_]+:)?definitions/);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService?wsdl=",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									],
									"query": [
										{
											"key": "wsdl",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_03b Retrieval of IIS Service WSDL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is correct\", function () {\r",
											"    var contentType = null;\r",
											"    for (header in pm.response.headers.members) {\r",
											"        if (pm.response.headers.members[header].key == \"Content-Type\") {\r",
											"            contentType = pm.response.headers.members[header].value;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(contentType).to.match(/[\\/+]xml/);\r",
											"});\r",
											"\r",
											"pm.test(\"Contains WSDL definitions element\", function () {\r",
											"    pm.expect(responseBody).to.match(/\\/(<[a-zA-Z0-9_]+:)?definitions/);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService?wsdl=",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									],
									"query": [
										{
											"key": "wsdl",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_04/05a/06/07a/16/19 Send correctly formatted SOAP Request to the  endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var header = response?.Envelope?.Header?.HubResponseHeader;\r",
											"    try {\r",
											"        pm.expect(header).to.not.be.eql(undefined);\r",
											"        pm.expect(header).to.have.property('DestinationId');\r",
											"        pm.expect(header).to.have.property('DestinationUri');\r",
											"    } catch (err) {\r",
											"        console.log({\"header\": header});\r",
											"        throw err;\r",
											"    }\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    var expected = pm.collectionVariables.get(\"GoodResponse\");\r",
											"    try {\r",
											"        pm.expect(hl7Message.replaceAll('\\r','\\n')).to.be.eql(expected.replaceAll('\\r','\\n'));  // TODO: Raise the issue of CR's in content.\r",
											"    } catch (err) {\r",
											"        console.log(hl7Message, expected);\r",
											"        throw err;\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        txData = utils.getTxData(logs);\r",
											"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
											"        });\r",
											"        pm.test(\"Log does not contain PHI\", function() {\r",
											"            pm.expect(txData[0].transactionData.requestHL7Message).to.not.contain(\"\\nPID\");\r",
											"            pm.expect(txData[0].transactionData.requestHL7Message).to.not.contain(\"\\nQPD\");\r",
											"        });\r",
											"        utils.testLogs(logs, pm, 250);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
											"utils.checkNamespaces(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_89a Logging Test: Logged Message in Dev",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var header = response?.Envelope?.Header?.HubResponseHeader;\r",
											"    try {\r",
											"        pm.expect(header).to.not.be.eql(undefined);\r",
											"        pm.expect(header).to.have.property('DestinationId');\r",
											"        pm.expect(header).to.have.property('DestinationUri');\r",
											"    } catch (err) {\r",
											"        console.log({\"header\": header});\r",
											"        throw err;\r",
											"    }\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    var expected = pm.collectionVariables.get(\"GoodResponse\");\r",
											"    try {\r",
											"        pm.expect(hl7Message.replaceAll('\\r','\\n')).to.be.eql(expected.replaceAll('\\r','\\n'));  // TODO: Raise the issue of CR's in content.\r",
											"    } catch (err) {\r",
											"        console.log(hl7Message, expected);\r",
											"        throw err;\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        txData = utils.getTxData(logs);\r",
											"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
											"        });\r",
											"        pm.test(\"Log does not contain PHI\", function() {\r",
											"            pm.expect(txData[0].transactionData.requestHL7Message).to.not.contain(\"\\nPID\");\r",
											"            pm.expect(txData[0].transactionData.requestHL7Message).to.not.contain(\"\\nQPD\");\r",
											"        });\r",
											"        utils.testLogs(logs, pm, 250);\r",
											"    });\r",
											"}\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
											"utils.checkNamespaces(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_ACK03 Error Handling IIS wants to Warn a Sender of an issue. No Error level problems with Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
											"            txData = utils.getTxData(logs);\r",
											"            pm.expect(txData.length).to.be.greaterThan(0);\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
											"        });\r",
											"    });\r",
											"};\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>DEV</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|SIISCLIENT28374|SIISCLIENT28374|TEST|TC_ACK|0320210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_ACK06 Error Handling IIS has Warnings and Errors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        pm.test(\"Log has an HL7 Error\", function() {\r",
											"            txData = utils.getTxData(logs);\r",
											"            pm.expect(txData.length).to.be.greaterThan(0);\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(true);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).matches(/^MSH\\|.*/);\r",
											"        });\r",
											"    });\r",
											"};\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|SIISCLIENT28374|SIISCLIENT28374|TEST|TC_ACK06|0320210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_21D Not Found (Circuit Breaker Thrown)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(pm.response.body));\r",
											"    var response = response?.Envelope?.Body?.Fault?.Detail?.HubClientFault;\r",
											"    pm.expect(response).to.not.be.eql(null);\r",
											"});\r",
											"\r",
											"async function moreTests() {\r",
											"    utils.getStatus(null, pm, true).then((logData) => {\r",
											"        var logs = null;\r",
											"        try {\r",
											"            logs = logData.json();\r",
											"        } catch (err) {\r",
											"            console.log(err);\r",
											"        }\r",
											"        pm.test(\"Status result is available\", function() {\r",
											"            pm.expect(logs).to.not.be.eql(null);\r",
											"        });\r",
											"        if (logs != null) {\r",
											"            pm.test(\"Circuit Breaker is Thrown\", function() {\r",
											"                pm.expect(logs[0].status).to.be.eql(\"Circuit Breaker Thrown\");\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"}\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IRIS IIS|IRIS|TEST|TC_21D|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|\r\nQPD|Z34^Request Immunization History^CDCPHINVS|20210330093013LA231|LAMASM77BF4BA6^^^IZGATEWAYTEST&amp;2.16.840.1.113883.40.1&amp;ISO^MR|JohnsonIZG^James^Andrew^^^^L|Leung^Jen^^^^^M|20160414|M|Main Street&amp;&amp;123^^New Orleans^LA^70115^^L|^PRN^PH^^^555^5551111|Y|1</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_04 after Circuit Breaker Thrown",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"var theBody = utils.removeNS(xml2Json(pm.response.text()));\r",
											"var response = theBody?.Envelope?.Body?.Fault?.Detail?.DestinationConnectionFault;\r",
											"var summary = theBody?.Envelope?.Body?.Fault?.Detail?.Summary;\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    pm.expect(response).to.not.be.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Circuit Breaker is Thrown\", function () {\r",
											"    pm.expect(summary).to.be.eql(\"CircuitBreakerThrown\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Not-Admin",
										"value": "true"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_90 Refresh",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save the request for use by subsequent tests\r",
											"var status = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type to be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
											"});\r",
											"\r",
											"pm.test(\"Body to parse as json object\", function() {\r",
											"    pm.expect(typeof status).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Has more that one key\", function() {\r",
											"    if (pm.request.url.toString().startsWith(\"https://localhost\")) {\r",
											"        return;\r",
											"    }\r",
											"    pm.expect(Object.keys(status).length).to.be.greaterThan(1);\r",
											"});\r",
											"\r",
											"pm.test(\"At least two keys report OK\", function() {\r",
											"    if (pm.request.url.toString().startsWith(\"https://localhost\")) {\r",
											"        return;\r",
											"    }\r",
											"    var count = 0;\r",
											"    for (k in status) {\r",
											"        if (status[k] == \"OK\" || status[k] == \"OK (Local)\") {\r",
											"            ++ count;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(count).to.be.greaterThan(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/refresh?all=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"refresh"
									],
									"query": [
										{
											"key": "all",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_91 Get Submission Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save the request for use by subsequent tests\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type to be text/html\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^text\\/html/);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/submitFile",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"submitFile"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_92a Get Documentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type to be text/html\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^text\\/html/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Not-Admin",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/swagger/ui.html",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"swagger",
										"ui.html"
									]
								},
								"description": "Retrieve the test system's IP Address to verify log response values by calling a third party IP Address reporting tool and storing the value in the collection variables under myIpAddr."
							},
							"response": []
						},
						{
							"name": "TC_92b Get Api Document",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type to be text/html\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/vnd.oai.openapi/);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Not-Admin",
										"value": "true"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/swagger/api-docs.yaml",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"swagger",
										"api-docs.yaml"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_95 Status History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save the request for use by subsequent tests\r",
											"var status = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type to be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
											"});\r",
											"var status = pm.response.json();\r",
											"console.log({\"Size\":  Object.keys(status).length });\r",
											"pm.test(\"Body to parse as json object\", function() {\r",
											"    pm.expect(typeof status).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"// Get the first object\r",
											"var firstObject = Object.values(status)[0][0];\r",
											"pm.test(\"First key matches destId\", function() {\r",
											"    pm.expect(firstObject.destId).to.eql(Object.keys(status)[0]);\r",
											"});\r",
											"pm.test(\"destType <> UNKNOWN\", function() {\r",
											"    pm.expect(firstObject.destType).to.not.eql(\"UNKNOWN\");\r",
											"});\r",
											"pm.test(\"destTypeId > 0\", function() {\r",
											"    pm.expect(firstObject.destTypeId).to.be.gt(0);\r",
											"});\r",
											"\r",
											"pm.test(\"destUri, destVersion, status, statusAt, statusBy exist and are non-null\", function() {\r",
											"    pm.expect(firstObject).to.include.all.keys(\"destUri\", \"destVersion\", \"status\", \"statusAt\", \"statusBy\", \"jurisdictionName\", \"jurisdictionDesc\");\r",
											"    for (key of [\"destUri\", \"destVersion\", \"status\", \"statusAt\", \"statusBy\", \"jurisdictionName\", \"jurisdictionDesc\"]) {\r",
											"        pm.expect(firstObject[key]).to.not.be.eql(null);\r",
											"    }\r",
											"});\r",
											"pm.test(\"detail, diagnostics, retryStrategy exist\", function() {\r",
											"    pm.expect(firstObject).to.include.all.keys(\"detail\", \"diagnostics\", \"retryStrategy\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/statushistory",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"statushistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_96 Trust Material",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type to be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
											"});\r",
											"var status = pm.response.json();\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body to parse as json object\", function() {\r",
											"    pm.expect(typeof status).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Server.entries.length >= 3\", function() {\r",
											"    pm.expect(Object.values(status.Server.entries).length).to.be.gte(3);\r",
											"})\r",
											"pm.test(\"Client.entries.length > 10\", function() {\r",
											"    pm.expect(Object.values(status.Client.entries).length).to.be.gt(10);\r",
											"})\r",
											"pm.test(\"status.status = Reloaded\", function() {\r",
											"    pm.expect(status.status).to.be.eql(\"Reloaded\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/trust?test=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"trust"
									],
									"query": [
										{
											"key": "test",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_97 Access Controls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content-Type to be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
											"});\r",
											"var status = pm.response.json();\r",
											"\r",
											"pm.test(\"Body to parse as json object\", function() {\r",
											"    pm.expect(typeof status).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Endpoints exists\", function() {\r",
											"    pm.expect(typeof status.Endpoints).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Groups exists\", function() {\r",
											"    pm.expect(typeof status.Groups).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Routes exists\", function() {\r",
											"    pm.expect(typeof status.Routes).to.eql(\"object\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/access",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"access"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_99 IIS Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save the request for use by subsequent tests\r",
											"pm.variables.set(\"getLogs\",pm.request);\r",
											"pm.test(\"Content-Type to be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
											"});\r",
											"var status = pm.response.json();\r",
											"\r",
											"pm.test(\"Body to parse as json object\", function() {\r",
											"    pm.expect(typeof status).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"404 endpoint has 404 status\", function() {\r",
											"    pm.expect(status[\"404\"].status).to.be.eql(\"HTTP Error 404\");\r",
											"});\r",
											"\r",
											"pm.test(\"dev endpoints have status = Connected\", function() {\r",
											"    pm.expect(status[\"dev\"].status).to.be.eql(\"Connected\");\r",
											"    pm.expect(status[\"devwup\"].status).to.be.eql(\"Connected\");\r",
											"});\r",
											"\r",
											"pm.test(\"down endpoint has status = Connect Timeout\", function() {\r",
											"    pm.expect(status[\"down\"].status).to.be.eql(\"Connect Timeout\");\r",
											"});\r",
											"\r",
											"pm.test(\"invalid endpoint has status = DNS Resolution Error\", function() {\r",
											"    pm.expect(status[\"invalid\"].status).to.be.eql(\"DNS Resolution Error\");\r",
											"});\r",
											"\r",
											"pm.test(\"reject endpoint has status = Connection Rejected\", function() {\r",
											"    pm.expect(status[\"reject\"].status).to.be.eql(\"Connection Rejected\");\r",
											"});\r",
											"\r",
											"// Verify logging for status checks\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        txData = utils.getTxData(logs);\r",
											"        utils.testLogs(logs, pm, LONG_SLA);\r",
											"    });\r",
											"}\r",
											"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Functional Tests",
					"item": [
						{
							"name": "Password Change Testing in Mock",
							"item": [
								{
									"name": "TC_94A GET MessageHeaderInfo Header Values",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var m = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof m).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"// map[id].msh = id\r",
													"\r",
													"for (const msh in m) {\r",
													"    var header = m[msh];\r",
													"    pm.test(\"Entry to parse as json object\", function() {\r",
													"        pm.expect(typeof header).to.eql(\"object\");\r",
													"    });\r",
													"    pm.test(\"Entry to have msh value equal to \" + msh, function() {\r",
													"        pm.expect(header.msh).to.be.eql(msh);\r",
													"    });\r",
													"    pm.test(\"Entry to have possibly null destId, iis, username, password and facilityId values\", function() {\r",
													"        pm.expect(header).to.include.all.keys('destId', 'iis', 'username', 'password', 'facilityId')\r",
													"    });\r",
													"    pm.test(\"Entry to have non-null sourceType value\", function() {\r",
													"        pm.expect(header.sourceType).to.not.eql(null);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/headers",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"headers"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_94B GET MessageHeaderInfo by Id Header Values",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var m = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof m).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"// map[id].msh = id\r",
													"\r",
													"var header = m;\r",
													"pm.test(\"Entry to parse as json object\", function() {\r",
													"    pm.expect(typeof header).to.eql(\"object\");\r",
													"});\r",
													"pm.test(\"Entry to have msh value equal to IRIS\", function() {\r",
													"    pm.expect(header.msh).to.be.eql('IRIS');\r",
													"});\r",
													"pm.test(\"Entry to have possibly null destId, iis, username, password and facilityId values\", function() {\r",
													"    pm.expect(header).to.include.all.keys('destId', 'iis', 'username', 'password', 'facilityId')\r",
													"});\r",
													"pm.test(\"Entry to have non-null sourceType value\", function() {\r",
													"    pm.expect(header.sourceType).to.not.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/headers/IRIS",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"headers",
												"IRIS"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_92A POST Updated Username, Password, Facility Id in MessageHeaderInfo Table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var m = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof m).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"// map[id].msh = id\r",
													"\r",
													"var header = m;\r",
													"pm.test(\"Entry to parse as json object\", function() {\r",
													"    pm.expect(typeof header).to.eql(\"object\");\r",
													"});\r",
													"pm.test(\"Entry to have msh value equal to IRIS\", function() {\r",
													"    pm.expect(header.msh).to.be.eql('IRIS');\r",
													"});\r",
													"pm.test(\"Entry to have possibly null destId, iis values\", function() {\r",
													"    pm.expect(header).to.include.all.keys('destId', 'iis')\r",
													"    pm.expect(header.destId).to.be.not.eql('bogus');\r",
													"    pm.expect(header.iis).to.be.not.eql('bogus');\r",
													"    pm.expect(header.sourceType).to.be.not.eql('bogus');\r",
													"});\r",
													"pm.test(\"Entry to have possibly username, password and facilityId values set to bogus\", function() {\r",
													"    pm.expect(header.username).to.be.eql('bogus');\r",
													"    pm.expect(header.password).to.be.eql('bogus');\r",
													"    pm.expect(header.facilityId).to.be.eql('bogus');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"msh\": \"IRIS\",\r\n    \"destId\": \"bogus\",\r\n    \"iis\": \"bogus\",\r\n    \"sourceType\": \"bogus\",\r\n    \"username\": \"bogus\",\r\n    \"password\": \"bogus\",\r\n    \"facilityId\": \"bogus\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/headers/IRIS",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"headers",
												"IRIS"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_92B SubmitSingleMessage Expecting to Fail due to username/password change in mock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"var jsonObject = utils.removeNS(xml2Json(responseBody));\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var reasonText= jsonObject?.Envelope?.Body?.Fault?.Reason?.Text?._;\r",
													"    pm.expect(reasonText).to.not.be.eql(undefined);\r",
													"    pm.expect(reasonText).to.include(\"Destination Threw SecurityFault\");\r",
													"});\r",
													"\r",
													"pm.test(\"Detail has correct details about fault\", function () {\r",
													"    var detail = jsonObject?.Envelope?.Body?.Fault?.Detail?.Detail;\r",
													"    pm.expect(detail).to.not.be.eql(undefined);\r",
													"    pm.expect(detail).to.include(\"Invalid Username, Invalid Password, Invalid FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = jsonObject?.Envelope?.Body?.Fault?.Detail?.Summary;\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = jsonObject?.Envelope?.Body?.Fault?.Detail?.Retry;\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_92C POST Reset Username, Password, Facility Id in MessageHeaderInfo Table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var m = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof m).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"// map[id].msh = id\r",
													"\r",
													"var header = m;\r",
													"pm.test(\"Entry to parse as json object\", function() {\r",
													"    pm.expect(typeof header).to.eql(\"object\");\r",
													"});\r",
													"pm.test(\"Entry to have msh value equal to IRIS\", function() {\r",
													"    pm.expect(header.msh).to.be.eql('IRIS');\r",
													"});\r",
													"pm.test(\"Entry to have possibly null destId, iis values\", function() {\r",
													"    pm.expect(header).to.include.all.keys('destId', 'iis')\r",
													"    pm.expect(header.destId).to.be.not.eql('bogus');\r",
													"    pm.expect(header.iis).to.be.not.eql('bogus');\r",
													"    pm.expect(header.sourceType).to.be.not.eql('bogus');\r",
													"});\r",
													"pm.test(\"Entry to have possibly username, password and facilityId values set to null\", function() {\r",
													"    pm.expect(header.username).to.be.eql(null);\r",
													"    pm.expect(header.password).to.be.eql(null);\r",
													"    pm.expect(header.facilityId).to.be.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"msh\": \"IRIS\",\r\n    \"destId\": \"bogus\",\r\n    \"iis\": \"bogus\",\r\n    \"sourceType\": \"bogus\",\r\n    \"username\": null,\r\n    \"password\": null,\r\n    \"facilityId\": null\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/headers/IRIS",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"headers",
												"IRIS"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Maintenance",
							"item": [
								{
									"name": "TC_93A Get Maintenance Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Save the request for use by subsequent tests\r",
													"var status = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof status).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"Has at least one key that matches maint\", function() {\r",
													"    pm.expect(status.maint).to.not.be.eql(undefined);\r",
													"});\r",
													"pm.test(\"Has correct values for maintReason and maintStart\", function() {\r",
													"    pm.expect(status.maint.maintReason).to.include(\"Destination is under maint\");\r",
													"    pm.expect(status.maint.maintStart).to.not.be.eql(null);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Message-ID",
												"value": "{{testMessageId}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/maint",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"maint"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_93B Get Maintenance Status for dev",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Save the request for use by subsequent tests\r",
													"var status = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof status).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"maintReason, maintStart, and maintEnd are all null\", function() {\r",
													"    pm.expect(status.maintReason).to.be.eql(null);\r",
													"    pm.expect(status.maintStart).to.be.eql(null);\r",
													"    pm.expect(status.maintEnd).to.be.eql(null);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Message-ID",
												"value": "{{testMessageId}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/maint/dev",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"maint",
												"dev"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_93C Set Maintenance Status for dev",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Save the request for use by subsequent tests\r",
													"var status = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof status).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"maintReason, maintStart, and maintEnd have expected values\", function() {\r",
													"    pm.expect(status.maintReason).to.be.eql(\"Password Change\");\r",
													"    pm.expect(status.maintStart).to.not.be.eql(null);\r",
													"    pm.expect(status.maintEnd).to.not.be.eql(null);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Message-ID",
												"value": "{{testMessageId}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/maint/dev?reason=Password Change&start=now",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"maint",
												"dev"
											],
											"query": [
												{
													"key": "reason",
													"value": "Password Change"
												},
												{
													"key": "start",
													"value": "now"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_04 after Maintenance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (false) {\r",
													"    // This delay is required to allow DB time to update (but it still isn't enough)\r",
													"    var then = new Date();\r",
													"    do { var now = new Date(); } while (now - then < 250); // sleep for 250 millis\r",
													"\r",
													"    pm.test(\"Status code is 500\", function () {\r",
													"        pm.response.to.have.status(500);\r",
													"    });\r",
													"\r",
													"    var theDetail = utils.removeNS(xml2Json(responseBody))?.Envelope?.Body?.Fault?.Detail;\r",
													"    var response = theDetail?.DestinationConnectionFault;\r",
													"    var summary = theDetail?.Summary;\r",
													"    pm.test(\"Response is As Expected\", function () {\r",
													"        pm.expect(response).to.not.be.eql(undefined);\r",
													"        pm.expect(response).to.not.be.eql(null);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Destination is Under Maintenance\", function () {\r",
													"        pm.expect(summary).to.not.be.eql(undefined);\r",
													"        pm.expect(summary).to.be.eql(\"UnderMaintenance\");\r",
													"    });\r",
													"} else {\r",
													"    console.log(\"TC_04 After Maintenance disabled\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Not-Admin",
												"value": "true"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_93D Clear Maintenance Status for dev",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Save the request for use by subsequent tests\r",
													"var status = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof status).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"maintReason, maintStart, and maintEnd are all null\", function() {\r",
													"    pm.expect(status.maintReason).to.be.eql(null);\r",
													"    pm.expect(status.maintStart).to.be.eql(null);\r",
													"    pm.expect(status.maintEnd).to.be.eql(null);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Message-ID",
												"value": "{{testMessageId}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/maint/dev",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}{{prefix}}",
											"path": [
												"maint",
												"dev"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_93E after Clearing Maintenance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    var response = utils.removeNS(xml2Json(responseBody));\r",
													"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
													"    var request = xml2Json(pm.request.body);\r",
													"    pm.expect(hl7Message).to.be.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Integration Tests",
					"item": [
						{
							"name": "TC_00a Retrieval of Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save the request for use by subsequent tests\r",
											"pm.variables.set(\"getLogs\",pm.request);\r",
											"pm.test(\"Content-Type to be application/json\", function() {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json\");\r",
											"} )\r",
											"pm.test(\"Body to parse as json array\", function() {\r",
											"    pm.expect(pm.response.json().length).to.be.greaterThan(0);\r",
											"} )\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// No setup for this one"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/logs",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{prefix}}",
									"path": [
										"logs"
									]
								},
								"description": "Verify recent logs can be retrieved via\n\nGET /rest/logs\n\nLog output content type is application/json\n\nLog parses as a json Array"
							},
							"response": []
						},
						{
							"name": "TC_00b Reset of Logs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify the output.  It must be valid json with content-type application/json\r",
											"\r",
											"// Save the request for use by subsequent tests\r",
											"pm.variables.set(\"resetLogs\",pm.request);\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response).to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"No Body\", function () {\r",
											"    pm.expect(pm.response.responseSize).to.be.eql(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// No setup for this one"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Message-ID",
										"value": "{{testMessageId}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}{{prefix}}/logs?clear=dev",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{prefix}}",
									"path": [
										"logs"
									],
									"query": [
										{
											"key": "clear",
											"value": "dev"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_01c Connectivity Test w/ HubRequestHeader is Successful to IZGW",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var echoBack;\r",
											"var env = pm.environment.get(\"testingEnvironment\");\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is same as sent\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var request = utils.removeNS(xml2Json(pm.request.body));\r",
											"    echoBack = request['Envelope']['Body']['ConnectivityTestRequest']['EchoBack'] \r",
											"    pm.expect(response['Envelope']['Body']['ConnectivityTestResponse']['EchoBack']).to.eql(echoBack);\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        txData = utils.getTxData(logs);\r",
											"        var isV2 = txData[0].transactionData.serverRequest !== undefined;\r",
											"        pm.test(\"Logs are an array of objects\", function () {\r",
											"            pm.expect(logs).to.be.an('array');\r",
											"            pm.expect(logs[0]?.transactionData).to.be.an(\"object\");\r",
											"        });\r",
											"\r",
											"        pm.test(\"There are no ERROR, WARN, stack_trace or SOAPFaults in logs\", function () {\r",
											"            for (log of logs) {\r",
											"                pm.expect(log.level).to.match(/INFO|DEBUG|TRACE/);\r",
											"                pm.expect(typeof log.stack_trace ).eql(\"undefined\");\r",
											"                if ('ws_response_message' in log) {\r",
											"                    pm.expect(log.ws_response_message.soapFault, 'response SOAP fault must be null').to.be.eql(null);\r",
											"                }\r",
											"                if ('ws_request_message' in log) {\r",
											"                    pm.expect(log.ws_request_message.soapFault, 'request SOAP fault must be null').to.be.eql(null);\r",
											"                }\r",
											"            }\r",
											"        });\r",
											"\r",
											"        requests = isV2 ? null : utils.getWsRequest(logs);\r",
											"        req0 = isV2 ? txData[1]?.transactionData?.serverRequest : requests[0];\r",
											"        req1 = isV2 ? txData[1]?.transactionData?.clientRequest : requests[1];\r",
											"        req2 = isV2 ? txData[0]?.transactionData?.serverRequest : requests[2];\r",
											"        req3 = isV2 ? txData[0]?.transactionData?.clientRequest : requests[3];\r",
											"\r",
											"        pm.test(\"There are 3 requests\", function () {\r",
											"            if (isV2) {\r",
											"                pm.expect(req0).to.not.eql(null);\r",
											"                pm.expect(req1).to.not.eql(null);\r",
											"                pm.expect(req2).to.not.eql(null);\r",
											"                pm.expect(req3).to.not.eql(null);\r",
											"            } else {\r",
											"                pm.expect(requests.length).to.eql(3);\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"First request EndPoint Type is INBOUND to SERVER\", function () {\r",
											"            pm.expect(req0.ws_request_message.direction).to.eql(\"INBOUND\");\r",
											"            pm.expect(req0.ws_request_message.endpointType).to.eql(\"SERVER\");\r",
											"            // pm.expect(requests[0].ws_request_message.endpointAddress).to.eql(\"/IISHubService\"); Don't need this anymore, it's in destination\r",
											"        });\r",
											"\r",
											"        pm.test(\"First request MessageID Matches inbound MessageID\", function () {\r",
											"            pm.expect(req0.ws_request_message.soapHeaders.MessageID).to.eql(pm.environment.get(\"testMessageId\"));\r",
											"        });\r",
											"        // NOTE: You have to pay attention to the format that IZGW Serializes to in constructing the message!\r",
											"        // The body of this test is carefully structured for an exact match of the expected output format.\r",
											"        pm.test(\"First request payload matches inbound body\", function () {\r",
											"            var payload = req0.ws_request_message.payload.trim().replace(/[\\r]+/g,\"\");\r",
											"            var expected = pm.request.body.raw.trim().replace(/[\\r]+/g,\"\");\r",
											"            pm.expect(payload).to.eql(expected);\r",
											"        });\r",
											"\r",
											"        pm.test(\"Second request EndPoint Type is OUTBOUND to CLIENT\", function () {\r",
											"            pm.expect(req1.ws_request_message.direction).to.eql(\"OUTBOUND\");\r",
											"            pm.expect(req1.ws_request_message.endpointType).to.eql(\"CLIENT\");\r",
											"        });\r",
											"\r",
											"        pm.test(\"Third request EndPoint Type is INBOUND to SERVER\", function () {\r",
											"            pm.expect(req2.ws_request_message.direction).to.eql(\"INBOUND\");\r",
											"            pm.expect(req2.ws_request_message.endpointType).to.eql(\"SERVER\");\r",
											"            // pm.expect(requests[1].ws_request_message.endpointAddress).to.match(/^https:.*\\/dev\\/IISService/); // No longer necessary, we have destination\r",
											"        });\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        pm.test(\"Log to contain transactionData with echoBack == request.responseHL7Message\", function() {\r",
											"            pm.expect(txData[txData.length - 1]).to.have.nested.property('transactionData.responseHL7Message');\r",
											"            pm.expect(txData[txData.length - 1].transactionData.responseHL7Message).to.be.eql(echoBack)\r",
											"            pm.expect(txData.length).to.be.eql(2);\r",
											"        });\r",
											"\r",
											"        responses = utils.getWsResponse(logs)\r",
											"        resp0 = isV2 ? txData[1]?.transactionData?.serverResponse : responses[0];\r",
											"        resp1 = isV2 ? txData[1]?.transactionData?.clientResponse : responses[1];\r",
											"        resp2 = isV2 ? txData[0]?.transactionData?.serverResponse : responses[2];\r",
											"        resp3 = isV2 ? txData[0]?.transactionData?.clientResponse : responses[3];\r",
											"\r",
											"        pm.test(\"There are 4 responses\", function () {\r",
											"            pm.expect(resp0?.ws_response_message, \"resp0 failed\" + JSON.stringify(resp0)).to.not.eql(null);\r",
											"            pm.expect(resp1?.ws_response_message, \"resp1 failed\" + JSON.stringify(resp1)).to.not.eql(null);\r",
											"            pm.expect(resp2?.ws_response_message, \"resp2 failed\" + JSON.stringify(resp2)).to.not.eql(null);\r",
											"            pm.expect(resp3?.ws_response_message, \"resp3 failed\" + JSON.stringify(resp3)).to.eql(null);\r",
											"        });\r",
											"        pm.test(\"First Response is OUTBOUND SERVER\", function () {\r",
											"            pm.expect(resp0?.ws_response_message.direction).to.eql(\"OUTBOUND\");\r",
											"            pm.expect(resp0?.ws_response_message.endpointType).to.eql(\"SERVER\");\r",
											"\r",
											"        });\r",
											"        pm.test(\"Second Response is INBOUND CLIENT\", function () {\r",
											"            pm.expect(resp1?.ws_response_message.direction).to.eql(\"INBOUND\");\r",
											"            pm.expect(resp1?.ws_response_message.endpointType).to.eql(\"CLIENT\");\r",
											"        });\r",
											"        pm.test(\"Third Response is OUTBOUND SERVER\", function () {\r",
											"            pm.expect(resp2?.ws_response_message.direction).to.eql(\"OUTBOUND\");\r",
											"            pm.expect(resp2?.ws_response_message.endpointType).to.eql(\"SERVER\");\r",
											"        });\r",
											"\r",
											"        utils.testLogs(logs, pm, TX_SLA);\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\"){\r",
											"    utils.testSLA(pm, LONG_SLA);\r",
											"    moreTests();\r",
											"    utils.checkNamespaces(pm);\r",
											" }\r",
											" \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:iis=\"urn:cdc:iisb:2014\">\r\n    <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n        <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:ConnectivityTestRequest</wsa:Action>\r\n        <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n        <wsa:To>http://www.w3.org/2005/08/addressing/anonymous</wsa:To>\r\n        <hub:HubRequestHeader xmlns:hub=\"urn:cdc:iisb:hub:2014\">\r\n            <hub:DestinationId>dev</hub:DestinationId>\r\n        </hub:HubRequestHeader>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <iis:ConnectivityTestRequest>\r\n            <iis:EchoBack>Wishing {{host}}:{{port}} an Audacious Hello at {{$isoTimestamp}}!</iis:EchoBack>\r\n        </iis:ConnectivityTestRequest>\r\n    </soap:Body>\r\n</soap:Envelope>\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_01b Connectivity Test is Successful to IZGW Dev Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response).to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is same as sent\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var request = utils.removeNS(xml2Json(pm.request.body));\r",
											"    var sent = request['Envelope']['Body']['ConnectivityTestRequest']['EchoBack'] \r",
											"    pm.expect(response['Envelope']['Body']['ConnectivityTestResponse']['EchoBack']).to.eql(sent);\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, BASE_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"\r",
											"        pm.test(\"Logs are an array of objects\", function () {\r",
											"            pm.expect(logs).to.be.an('array');\r",
											"            pm.expect(logs[0]).to.be.an(\"object\");\r",
											"        });\r",
											"\r",
											"        var a = new Array();\r",
											"        for (e of logs) {\r",
											"            eventId = parseInt(e.eventId.split('.')[1]);\r",
											"            if (eventId > 2) {\r",
											"                a.add(e);\r",
											"            }\r",
											"        }\r",
											"        logs = a;\r",
											"\r",
											"        pm.test(\"There are no ERROR, WARN, stack_trace or SOAPFaults in logs\", function () {\r",
											"            for (log of logs) {\r",
											"                pm.expect(log.level).to.match(/INFO|DEBUG|TRACE/);\r",
											"                pm.expect(typeof log.stack_trace ).eql(\"undefined\");\r",
											"                if ('ws_response_message' in log) {\r",
											"                    pm.expect(log.ws_response_message.soapFault, 'response SOAP fault must be null').to.be.eql(null);\r",
											"                }\r",
											"                if ('ws_request_message' in log) {\r",
											"                    pm.expect(log.ws_request_message.soapFault, 'request SOAP fault must be null').to.be.eql(null);\r",
											"                }\r",
											"            }\r",
											"        });\r",
											"        pm.test(\"Excpecting 3 log entries\", function() {\r",
											"            var txData = utils.getTxData(logs);\r",
											"            var wsData = utils.getWsRequest(logs).concat(utils.getWsResponse(logs))\r",
											"            pm.expect(txData.length + wsData.length).to.be.greaterThan(2);\r",
											"        });\r",
											"\r",
											"        var wsData = utils.getWsRequest(logs);\r",
											"        \r",
											"        pm.test(\"First log EndPoint Type is INBOUND to SERVER\", function () {\r",
											"            pm.expect(wsData[0].ws_request_message.direction).to.eql(\"INBOUND\");\r",
											"            pm.expect(wsData[0].ws_request_message.endpointType).to.eql(\"SERVER\");\r",
											"        });\r",
											"\r",
											"        pm.test(\"First log MessageID Matches inbound MessageID\", function () {\r",
											"            pm.expect(wsData[0].ws_request_message.soapHeaders.MessageID).to.eql(pm.environment.get(\"testMessageId\"));\r",
											"        });\r",
											"        // Be careful editing the body, it is written to match the serialization format of the output log\r",
											"        pm.test(\"First log payload matches inbound body\", function () {\r",
											"            var payload = wsData[0].ws_request_message.payload.trim().replace(/[\\r]+/g,\"\");\r",
											"            var expected = pm.request.body.raw.trim().replace(/[\\r]+/g,\"\");\r",
											"            pm.expect(payload).to.eql(expected);\r",
											"        });\r",
											" \r",
											"        wsData = utils.getWsResponse(logs);\r",
											"        pm.test(\"Second log Response is OUTBOUND SERVER\", function () {\r",
											"            pm.expect(wsData[0].ws_response_message.direction).to.eql(\"OUTBOUND\");\r",
											"            pm.expect(wsData[0].ws_response_message.endpointType).to.eql(\"SERVER\");\r",
											"        });\r",
											"        \r",
											"        utils.testLogs(logs, pm, TX_SLA);\r",
											"    });\r",
											"}\r",
											"\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											"utils.checkNamespaces(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:iis=\"urn:cdc:iisb:2014\">\r\n    <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n        <wsa:Action>urn:cdc:iisb:2014:IISPortType:ConnectivityTestRequest</wsa:Action>\r\n        <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n        <wsa:To>http://www.w3.org/2005/08/addressing/anonymous</wsa:To>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <iis:ConnectivityTestRequest>\r\n            <iis:EchoBack>Wishing {{host}}:{{port}} an Audacious Hello at {{$isoTimestamp}}!</iis:EchoBack>\r\n        </iis:ConnectivityTestRequest>\r\n    </soap:Body>\r\n</soap:Envelope>\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/dev/IISService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"dev",
										"IISService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_98 Health Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body to parse as json object\", function() {\r",
											"    pm.expect(typeof pm.response.json()).to.eql(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response has health attribute\", function () {\r",
											"    pm.expect(responseBody).to.contain('health');\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body has healthEvents attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"eventCount\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has lastUnHealthy attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastUnhealthy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has  lastHealthy attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastHealthy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has  requestVolume attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"requestVolume\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has  successVolume attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"successVolume\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has lastChangeReason attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastChangeReason\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has started attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"started\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has statusAt attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"statusAt\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has statusAt attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"statusAt\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has serverName attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"serverName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body has buildName attribute\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"buildName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/rest/health",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"rest",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_ACK02 Error Handling IIS Accepted Message with additional Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
											"            txData = utils.getTxData(logs);\r",
											"            pm.expect(txData.length).to.be.greaterThan(0);\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
											"        });\r",
											"    });\r",
											"};\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\" && !pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) {\r",
											"    moreTests();\r",
											" }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|SIISCLIENT28374|SIISCLIENT28374|TEST|TC_ACK02|0320210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_ACK04 Error Handling IIS has Error level problem with the message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
											"            txData = utils.getTxData(logs);\r",
											"            pm.expect(txData.length).to.be.greaterThan(0);\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(true);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).matches(/^MSH\\|.*/);\r",
											"        });\r",
											"    });\r",
											"};\r",
											"\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\" && !pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) { moreTests();\r",
											" }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|SIISCLIENT28374|SIISCLIENT28374|TEST|TC_ACK04|0320210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_ACK05 Error Handling IIS has Warnings and Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        pm.test(\"Log does not have an HL7 Error\", function() {\r",
											"            txData = utils.getTxData(logs);\r",
											"            pm.expect(txData.length).to.be.greaterThan(0);\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error, \"\\n\" + JSON.stringify(txData, null,2)).to.be.eql(false);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).eqls(\"\");\r",
											"        });\r",
											"\r",
											"    });\r",
											"};\r",
											"\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|SIISCLIENT28374|SIISCLIENT28374|TEST|TC_ACK05|0320210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_ACK07 Error Handling IIS unable to process message due to 1 of 4 specific HL7 defined problems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        pm.test(\"Log has an HL7 Error\", function() {\r",
											"            txData = utils.getTxData(logs);\r",
											"            pm.expect(txData.length).to.be.greaterThan(0);\r",
											"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(true);\r",
											"            pm.expect(txData[0].transactionData.hl7Error).matches(/^MSH\\|.*/);\r",
											"        });\r",
											"    });\r",
											"};\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|SIISCLIENT28374|SIISCLIENT28374|TEST|TC_ACK07|0320210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05b Request with Valid Headers Accept: text/plain Accept-Encoding: gzip",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    var expected = pm.collectionVariables.get(\"GoodResponse\").replaceAll('\\r','\\n');\r",
											"    try {\r",
											"        pm.expect(hl7Message).to.be.eql(expected);\r",
											"    } catch (err) {\r",
											"        console.log(hl7Message, expected);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05c Request with Valid Headers Accept: text/xml Accept-Encoding: compress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true,
									"accept-encoding": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Accept-Encoding",
										"value": "compress"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05d Request with Valid Headers Accept: text/html Accept-Encoding: default",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true,
									"accept-encoding": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/soap+xml"
									},
									{
										"key": "Accept",
										"value": "text/html"
									},
									{
										"key": "Accept-Charset",
										"value": "deflate"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05e Request with Valid Headers Accept: application/xml Accept-Encoding: br",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"value": "br"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05f Request with Valid Headers Accept: application/soap Accept-Encoding: identity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/soap"
									},
									{
										"key": "Accept",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05g Request with Valid Headers Accept: application/soap+xml Accept-Encoding: *",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/soap"
									},
									{
										"key": "Accept",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_05h Request with Valid Headers Accept: <none> Accept-Encoding: <none>",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/soap"
									},
									{
										"key": "Accept",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_07b Send correctly formatted SOAP Request to the  endpoint (LF)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const xml2js = require('xml2js');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessageLF}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_07c Send correctly formatted SOAP Request to the  endpoint (CRLF)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    pm.expect(hl7Message).to.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessageLF}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_08a Send SOAP Request with no DestinationId value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has UnknownDestinationFault with empty DestinationID value\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var fault = response['Envelope']['Body']['Fault']['Detail']['UnknownDestinationFault'];\r",
											"    var destId = fault['DestinationId'];\r",
											"\r",
											"    pm.expect(fault).to.not.be.eql(null);\r",
											"    pm.expect(destId).to.eql(\"\");\r",
											"\r",
											"    const interval = setTimeout(() => {}, 3000);\r",
											"    async function moreTests() {\r",
											"        utils.getLogs(null, pm).then((logData) => {\r",
											"            logs = logData.json();\r",
											"            utils.testLogs(logs, pm, 0, \"UnknownDestinationFault\", \"InvalidDestinationID\", \"CORRECT_MESSAGE\");\r",
											"        });\r",
											"    }\r",
											"    if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId></urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessageLF}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_08b Send SOAP Request with no DestinationId Element",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has UnknownDestinationFault with empty DestinationID value\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var fault = response['Envelope']['Body']['Fault']['Detail']['UnknownDestinationFault'];\r",
											"    var destId = fault['DestinationId'];\r",
											"    pm.expect(destId).to.eql(\"_null_\");\r",
											"\r",
											"    const interval = setTimeout(() => {}, 3000);\r",
											"    async function moreTests() {\r",
											"        utils.getLogs(null, pm).then((logData) => {\r",
											"            logs = logData.json();\r",
											"            utils.testLogs(logs, pm, 0, \"UnknownDestinationFault\", \"MissingHubRequestHeader\", \"CORRECT_MESSAGE\");\r",
											"        });\r",
											"    }\r",
											"     if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <!-- urn:DestinationId>dev</urn:DestinationId -->\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessageLF}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_08c Send SOAP Request with no HubHeader",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has UnknownDestinationFault with empty DestinationID value\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var fault = response['Envelope']['Body']['Fault']['Detail']['UnknownDestinationFault'];\r",
											"    var destId = fault['DestinationId'];\r",
											"    pm.expect(destId).to.eql(\"_null_\");\r",
											"\r",
											"    const interval = setTimeout(() => {}, 3000);\r",
											"    async function moreTests() {\r",
											"        utils.getLogs(null, pm).then((logData) => {\r",
											"            logs = logData.json();\r",
											"            utils.testLogs(logs, pm, 0, \"UnknownDestinationFault\", \"MissingHubRequestHeader\", \"CORRECT_MESSAGE\");\r",
											"        });\r",
											"    }\r",
											"     if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <!-- urn:HubRequestHeader>\r\n      <urn:DestinationId>!dev</urn:DestinationId>\r\n    </urn:HubRequestHeader -->\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessageLF}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService?cdc-iis.xsd",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									],
									"query": [
										{
											"key": "cdc-iis.xsd",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_09 Send SOAP Request with unknown (not configured) DestinationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"\r",
											"pm.test(\"Response has UnknownDestinationFault with unknown DestinationId value\", function () {\r",
											"    var request = utils.removeNS(xml2Json(pm.request.body.raw));\r",
											"    var requestedDestId = request['Envelope']['Header']['HubRequestHeader']['DestinationId'];\r",
											"    var destId = response['Envelope']['Body']['Fault']['Detail']['UnknownDestinationFault']['DestinationId'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(destId).to.eql(requestedDestId);\r",
											"});\r",
											"pm.test(\"Response has Summary = IISNotRegistered\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('IISNotRegistered');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
											"});\r",
											"pm.test(\"Response has correct soap reason\", function () {\r",
											"    var jsonObject = xml2Json(responseBody);\r",
											"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
											"    pm.expect(reasonText).to.contain('IIS Not Registered:');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"UnknownDestinationFault\", \"IISNotRegistered\", \"CONTACT_SUPPORT\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is 'unknown'\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.be.eql(\"unknown\");\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is false\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(false);\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns=\"urn:cdc:iisb:2014\" >\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>unknown</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <SubmitSingleMessageRequest>\r\n      <FacilityID>IZG</FacilityID>\r\n      <Hl7Message>{{GoodMessageLF}}</Hl7Message>\r\n    </SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_10 Send SOAP Request with invalid DestinationId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"\r",
											"pm.test(\"Response has UnknownDestinationFault with !dev DestinationId value\", function () {\r",
											"    var request = utils.removeNS(xml2Json(pm.request.body.raw));\r",
											"    var requestedDestId = request['Envelope']['Header']['HubRequestHeader']['DestinationId'];\r",
											"    var destId = response['Envelope']['Body']['Fault']['Detail']['UnknownDestinationFault']['DestinationId'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(destId).to.eql(requestedDestId);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has Summary = InvalidDestinationID\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('InvalidDestinationID');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"UnknownDestinationFault\", \"InvalidDestinationID\", \"CORRECT_MESSAGE\");\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns=\"urn:cdc:iisb:2014\" >\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>!dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <SubmitSingleMessageRequest>\r\n      <FacilityID>IZG</FacilityID>\r\n      <Hl7Message>{{GoodMessageLF}}</Hl7Message>\r\n    </SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_11 Request with Invalid Headers Accept: application/json",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// This is a change from 1.x, as 2.x could technically accept json.\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm,\"dev\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true,
									"accept": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_12a Server Message To Large",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")){\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Response has MessageTooLargeFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('MessageTooLargeFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:MessageTooLargeFault');\r",
											"});\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = RequestMessageTooLarge\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('RequestMessageTooLarge');\r",
											"});\r",
											"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"MessageTooLargeFault\", \"RequestMessageTooLarge\", \"CORRECT_MESSAGE\");\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is false\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(false);\r",
											"            });\r",
											"        }\r",
											"    });\r",
											"}\r",
											"    moreTests();\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{TooLargeMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_12b IIS Message To Large for Client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var env = pm.environment.get(\"testingEnvironment\");\r",
											"if(env !== \"test\"){\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has HubClientFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = DestinationThrewMessageTooLargeFault\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('DestinationThrewMessageTooLargeFault');\r",
											"});\r",
											"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"HubClientFault\", \"DestinationThrewMessageTooLargeFault\", \"CORRECT_MESSAGE\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only cheeck entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is true\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(true);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.ipAddress is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.cipherSuite is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.not.be.eql(null);\r",
											"            });\r",
											"        }        \r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{IisTooLargeMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_12c IIS Message Response Too Large",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var env = pm.environment.get(\"testingEnvironment\");\r",
											"if(env !== \"test\"){\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has MessageTooLargeFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('MessageTooLargeFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:MessageTooLargeFault');\r",
											"});\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = ResponseMessageTooLarge\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('ResponseMessageTooLarge');\r",
											"});\r",
											"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
											"});\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm);\r",
											"\r",
											" txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only cheeck entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is true\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(true);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.ipAddress is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.cipherSuite is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.not.be.eql(null);\r",
											"            });\r",
											"        }          \r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm,\"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_12C|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_13a Test against Inaccessible IIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has DestinationConnectionFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('DestinationConnectionFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:DestinationConnectionFault');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct soap reason about unable to resolve\", function () {\r",
											"    var jsonObject = xml2Json(responseBody);\r",
											"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
											"    pm.expect(reasonText).to.contain(\"DNS Resolution Error:\");\r",
											"});\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = DNSResolutionError\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('DNSResolutionError');\r",
											"});\r",
											"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
											"});\r",
											"\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"DestinationConnectionFault\", \"DNSResolutionError\", \"CHECK_IIS_STATUS\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only cheeck entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"destination.connected is false\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(false);\r",
											"            });\r",
											"            pm.test(\"destination.ipAddress is 'unknown'\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.be.eql(\"unknown\");\r",
											"            });\r",
											"            pm.test(\"destination.cipherSuite is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"        }                \r",
											"    });\r",
											"}\r",
											" if(!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"invalid\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>invalid</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_13b Test against Not Found IIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has HubClientFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct soap reason about not found IIS\", function () {\r",
											"    var jsonObject = xml2Json(responseBody);\r",
											"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
											"    pm.expect(reasonText).to.contain(\"HTTP Error 404\");\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = HTTPError404\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('HTTPError404');\r",
											"});\r",
											"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"HubClientFault\", \"HTTPError404\", \"CHECK_IIS_STATUS\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only cheeck entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            eventNo = entry.eventId.split('.')[1];\r",
											"            if (eventNo < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is true\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(true);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.ipAddress is not 'unknown'\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.not.be.eql(\"unknown\");\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.cipherSuite is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.not.be.eql(null);\r",
											"            });\r",
											"        }        \r",
											"    });\r",
											"}\r",
											" if(!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"404\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>404</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_13c Test against Unresponsive or down  IIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has DestinationConnectionFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('DestinationConnectionFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:DestinationConnectionFault');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct soap reason about connection time out\", function () {\r",
											"    var jsonObject = xml2Json(responseBody);\r",
											"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
											"    pm.expect(reasonText).to.include(\"Connect Timeout\");\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = ConnectTimeout\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('ConnectTimeout');\r",
											"});\r",
											"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"DestinationConnectionFault\", \"ConnectTimeout\", \"CHECK_IIS_STATUS\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only check entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is false\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(false);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.ipAddress is not 'unknown'\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.not.be.eql(\"unknown\");\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.cipherSuite is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.commonName is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"        }           \r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"down\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>down</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_13C|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_13d Test against Rejecting IIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has DestinationConnectionFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('DestinationConnectionFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:DestinationConnectionFault');\r",
											"});\r",
											"\r",
											"pm.test(\"SOAP Error indicates Unable to Resolve\", function() {\r",
											"    pm.expect(responseBody).to.contain('>Connection Rejected');\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = ConnectionRejected\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('ConnectionRejected');\r",
											"});\r",
											"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"DestinationConnectionFault\", \"ConnectionRejected\", \"CHECK_IIS_STATUS\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only cheeck entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is false\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(false);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.ipAddress is not 'unknown'\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.not.be.eql(\"unknown\");\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.cipherSuite is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.commonName is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"        }          \r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"reject\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>reject</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_13C|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_13e Test against IIS Under Maintenance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has DestinationConnectionFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('DestinationConnectionFault>');\r",
											"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:DestinationConnectionFault');\r",
											"});\r",
											"\r",
											"pm.test(\"SOAP Error indicates Under Maintenance\", function() {\r",
											"    pm.expect(responseBody).to.contain('>Under Maintenance');\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = UnderMaintenance\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('UnderMaintenance');\r",
											"});\r",
											"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"DestinationConnectionFault\", \"UnderMaintenance\", \"CHECK_IIS_STATUS\");\r",
											"\r",
											"        txData = utils.getTxData(logs);\r",
											"        for (entry of txData) {\r",
											"            // Only cheeck entries for Gateway, not for Mock\r",
											"            if (entry.transactionData.serviceType != \"Gateway\") {\r",
											"                continue;\r",
											"            }\r",
											"            if (entry.eventId < 2) continue; // Skip internal calls\r",
											"            pm.test(\"transactionData.destination.id is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.id).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.url is not null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.url).to.not.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.connected is false\", function () {\r",
											"                pm.expect(entry.transactionData.destination.connected).to.be.eql(false);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.ipAddress is not 'unknown'\", function () {\r",
											"                pm.expect(entry.transactionData.destination.ipAddress).to.not.be.eql(\"unknown\");\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.cipherSuite is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"            pm.test(\"transactionData.destination.commonName is null\", function () {\r",
											"                pm.expect(entry.transactionData.destination.cipherSuite).to.be.eql(null);\r",
											"            });\r",
											"        }          \r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									},
									{
										"key": "X-Not-Admin",
										"value": "true"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>maint</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_13D|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_14a Invalid Method: GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has UnsupportedOperationFault\", function () {\r",
											"    pm.expect(responseBody).to.contain('UnsupportedOperationFault');\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = UnsupportedOperation\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('UnsupportedOperation');\r",
											"});\r",
											"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm, 0, \"UnsupportedOperationFault\", \"UnsupportedOperation\", \"CHECK_IIS_STATUS\");\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_14b Invalid Method: PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm);\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_14c Invalid Method: DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500); // Used to be 404 in IZGW 1.X\r",
											"});\r",
											"\r",
											"\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        utils.testLogs(logs, pm);\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_15 Test with invalid characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a Fault\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var fault = response['Envelope']['Body']['Fault']['Detail'];\r",
											"    pm.expect(typeof fault).to.be.eql('object');\r",
											"});\r",
											"\r",
											"var response = utils.removeNS(xml2Json(responseBody));\r",
											"pm.test(\"Response has Summary = SyntaxError\", function() {\r",
											"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
											"   pm.expect(summary).to.be.eql('SyntaxError');\r",
											"});\r",
											"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
											"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
											"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
											"});\r",
											"const interval = setTimeout(() => {}, 3000);\r",
											"async function moreTests() {\r",
											"    utils.getLogs(null, pm).then((logData) => {\r",
											"        logs = logData.json();\r",
											"        txData = utils.getTxData(logs);\r",
											"        pm.test(\"Exactly 1 transactionData produced\", function(){\r",
											"        });\r",
											"        utils.testLogs(logs, pm);\r",
											"    });\r",
											"}\r",
											" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{hex0b}}{{GoodMessage}}{{hex1c}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_20a Send correctly formatted SOAP Request w/ username/password set to endpoint w/o username password configured",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.be.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, 1000);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm,\"devwup\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>devwup</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:Username>Username</urn1:Username>\r\n      <urn1:Password>Password</urn1:Password>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_20b Send correctly formatted SOAP Request w/o username/password set to endpoint w/o username password configured",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is As Expected\", function () {\r",
											"    var response = utils.removeNS(xml2Json(responseBody));\r",
											"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
											"    var request = xml2Json(pm.request.body);\r",
											"    pm.expect(hl7Message).to.be.eql(pm.collectionVariables.get(\"GoodResponse\"));\r",
											"});\r",
											"\r",
											"utils.testSLA(pm, LONG_SLA);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessage}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/IISHubService",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fault Testing",
					"item": [
						{
							"name": "Source Attack Pattern Testing",
							"item": [
								{
									"name": "TC_22a Invalid Request Element(contains 'script' attribute) Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('SecurityFault>');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Illegal element name\");\r",
													"    pm.expect(reasonText).to.include(\"Inbound Request\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = SourceAttackException\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('SourceAttackException');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n  <html:script>// This is a test script</html:script> \r\n  <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_04|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22b Invalid Response Element (contains 'script' element) Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(response.Envelope.Body.Fault.Detail.SecurityFault).to.not.be.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var reasonText = response.Envelope.Body.Fault.Reason.Text._;\r",
													"    pm.expect(reasonText).to.include(\"Illegal element name\");\r",
													"    pm.expect(reasonText).to.include(\"Inbound Response\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Summary = SourceAttackException\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('SourceAttackException');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n  <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_22B|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22c Invalid Request Attribute(contains 'javascript' attribute) Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('SecurityFault>');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Illegal attribute value\");\r",
													"    pm.expect(reasonText).to.include(\"Inbound Request\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = SourceAttackException\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('SourceAttackException');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"> \r\n  <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n    <wsa:RelatesTo RelationshipType=\"javascript:alert('this is an error');\">http://example.com</wsa:RelatesTo> </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_04|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22d Invalid Response Attribute(contains 'javascript' attribute) Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(response.Envelope.Body.Fault.Detail.SecurityFault).to.not.be.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var reasonText = response.Envelope.Body.Fault.Reason.Text._;\r",
													"    pm.expect(reasonText).to.include(\"Illegal attribute value\");\r",
													"    pm.expect(reasonText).to.include(\"Inbound Response\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = SourceAttackException\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('SourceAttackException');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\r\n    <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n        <urn:HubRequestHeader>\r\n            <urn:DestinationId>dev</urn:DestinationId>\r\n        </urn:HubRequestHeader>\r\n        <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n        <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <urn1:SubmitSingleMessageRequest>\r\n            <urn1:FacilityID>IZG</urn1:FacilityID>\r\n            <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_22D|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n        </urn1:SubmitSingleMessageRequest>\r\n    </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22e Invalid Request Text(contains 'javascript' text) Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('SecurityFault>');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Illegal text\");\r",
													"    pm.expect(reasonText).to.include(\"Inbound Request\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = SourceAttackException\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('SourceAttackException');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"> \r\n  <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n   <wsa:To>javascript:alert(\"This is an error\")</wsa:To> </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_25C|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22f Invalid Response Text (contains 'javascript' text) Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(response.Envelope.Body.Fault.Detail.SecurityFault).to.not.be.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var reasonText = response.Envelope.Body.Fault.Reason.Text._;\r",
													"    pm.expect(reasonText).to.include(\"Illegal text\");\r",
													"    pm.expect(reasonText).to.include(\"Inbound Response\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = SourceAttackException\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('SourceAttackException');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CONTACT_SUPPORT\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CONTACT_SUPPORT');\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n  <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_22F|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22g Disable Source Attack Pattern Originating User(or Endpoint) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var responseObject = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof responseObject).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"var responseBody = responseObject;\r",
													"pm.test(\"Entry to parse as json object\", function() {\r",
													"    pm.expect(typeof responseBody).to.eql(\"object\");\r",
													"});\r",
													"pm.test(\"Entry to have value equal to true\", function() {\r",
													"    pm.expect(responseBody.allowed).to.be.eql(true);\r",
													"});\r",
													"pm.test(\"Entry to have category value equal to blacklist\", function() {\r",
													"    pm.expect(responseBody.name).to.be.eql('blacklist');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/access/blacklist?user=mockuser.testing.izgateway.org",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"access",
												"blacklist"
											],
											"query": [
												{
													"key": "user",
													"value": "mockuser.testing.izgateway.org"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22h Verify Source Disabled Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var responseObject = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof responseObject).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"Entry to have entry equal to mockuser.testing.izgateway.org\", function() {\r",
													"    pm.expect(responseObject).includes(\"mockuser.testing.izgateway.org\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/access/groups/blacklist",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"access",
												"groups",
												"blacklist"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22i Enable Source Attack Pattern Originating User Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseObject = pm.response.json();\r",
													"\r",
													"// It's a JSON Map\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof responseObject).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"var responseBody = responseObject;\r",
													"pm.test(\"Entry to parse as json object\", function() {\r",
													"    pm.expect(typeof responseBody).to.eql(\"object\");\r",
													"});\r",
													"pm.test(\"Entry to have category equal to group\", function() {\r",
													"    pm.expect(responseBody.category).to.be.eql('group');\r",
													"});\r",
													"pm.test(\"Entry to have name value equal to blacklist\", function() {\r",
													"    pm.expect(responseBody.name).to.be.eql('blacklist');\r",
													"});\r",
													"pm.test(\"Entry to have member value equal to mockuser.testing.izgateway.org\", function() {\r",
													"    pm.expect(responseBody.member).to.be.eql('mockuser.testing.izgateway.org');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/access/blacklist?user=mockuser.testing.izgateway.org",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"access",
												"blacklist"
											],
											"query": [
												{
													"key": "user",
													"value": "mockuser.testing.izgateway.org"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22j Verify Source Enabled Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Content-Type to be application/json\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);\r",
													"});\r",
													"var responseObject = pm.response.json();\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// It's a JSON Map\r",
													"\r",
													"pm.test(\"Body to parse as json object\", function() {\r",
													"    pm.expect(typeof responseObject).to.eql(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"Entry to have NOT have entry equal to mockuser.testing.izgateway.org\", function() {\r",
													"    pm.expect(responseObject).not.includes(\"mockuser.testing.izgateway.org\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/access/groups/blacklist",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"access",
												"groups",
												"blacklist"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_22s HTML Response with script tag and javascript: url",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has SecurityFault\", function () {\r",
													"    pm.expect(response.Envelope.Body.Fault.Detail.SecurityFault).to.not.be.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var reasonText = response.Envelope.Body.Fault.Reason.Text._;\r",
													"    pm.expect(reasonText).to.include(\"Destination Returned Invalid Response\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationReturnedInvalidResponse\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationReturnedInvalidResponse');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\" xmlns:html=\"http://www.w3.org/1999/xhtml\">\r\n    <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n        <urn:HubRequestHeader>\r\n            <urn:DestinationId>dev</urn:DestinationId>\r\n        </urn:HubRequestHeader>\r\n        <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n        <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <urn1:SubmitSingleMessageRequest>\r\n            <urn1:FacilityID>IZG</urn1:FacilityID>\r\n            <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_22S|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n        </urn1:SubmitSingleMessageRequest>\r\n    </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SOAP Faults",
							"item": [
								{
									"name": "TC_23a 2011 Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(pm.response.text()).to.contain('HubClientFault>');\r",
													"    pm.expect(pm.response.text()).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(pm.response.text());\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													"var response = utils.removeNS(xml2Json(pm.response.text()));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev2011\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev2011</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_23A|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_23c 2011 Message Too Large Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Request Message Too Large\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewMessageTooLargeFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewMessageTooLargeFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev2011\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev2011</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_23C|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_23d 2011 Malformed Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev2011\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev2011</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_23D|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_23e 2011 Malformed Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev2011\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev2011</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_23E|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_23f 2011 Malformed Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev2011\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev2011</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_23F|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_23g 2011 Well-formed Security Fault Testing with HTTP 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev2011\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev2011</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_23G|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_24a 2014 Security Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_24A|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_24c 2014 Message Too Large Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Request Message Too Large\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewMessageTooLargeFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewMessageTooLargeFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_24C|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_24d 2014 Malformed Message Too Large Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Request Message Too Large\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewMessageTooLargeFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewMessageTooLargeFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_24D|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_24f 2014 Malformed Message Too Large Fault Testing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Request Message Too Large\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewMessageTooLargeFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewMessageTooLargeFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_24F|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_24g 2014 Security Fault Testing with HTTP 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    var jsonObject = xml2Json(responseBody);\r",
													"    var reasonText= jsonObject['soap:Envelope']['soap:Body']['soap:Fault']['soap:Reason']['soap:Text']['_'];\r",
													"    pm.expect(reasonText).to.include(\"Invalid Username, Password or FacilityID\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = DestinationThrewSecurityFault\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('DestinationThrewSecurityFault');\r",
													"});\r",
													"pm.test(\"Response has Retry = CORRECT_MESSAGE\", function() {\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CORRECT_MESSAGE');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_24G|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_24h 2014 Not a SOAP Fault with HTTP 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 500\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has HubClientFault\", function () {\r",
													"    pm.expect(responseBody).to.contain('HubClientFault>');\r",
													"    pm.expect(responseBody).to.contain('urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessage:Fault:HubClientFault');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct soap reason about fault\", function () {\r",
													"    pm.expect(responseBody).to.include(\"This is not a SOAP Fault nor is it XML\");\r",
													"});\r",
													"\r",
													"var response = utils.removeNS(xml2Json(responseBody));\r",
													"pm.test(\"Response has Summary = HTTPError400\", function() {\r",
													"   var summary = response['Envelope']['Body']['Fault']['Detail']['Summary'];\r",
													"   pm.expect(summary).to.be.eql('HTTPError400');\r",
													"});\r",
													"\r",
													"pm.test(\"Response has Retry = CHECK_IIS_STATUS\", function() {\r",
													"   var response = utils.removeNS(xml2Json(responseBody));\r",
													"   var retry = response['Envelope']['Body']['Fault']['Detail']['Retry'];\r",
													"   pm.expect(retry).to.be.eql('CHECK_IIS_STATUS');\r",
													"});\r",
													"utils.checkNamespaces(pm);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm, \"dev\");"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|||TEST|TC_24H|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "DEX Tests",
					"item": [
						{
							"name": "DEX Internals",
							"item": [
								{
									"name": "Generic Status Request to DEX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var echoBack;\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response).to.have.status(200);\r",
													"});\r",
													"\r",
													"utils.testSLA(pm, 500);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        pm.test(\"Logs are an array of objects\", function () {\r",
													"            pm.expect(logs).to.be.an('array');\r",
													"            pm.expect(logs[0]).to.be.an(\"object\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"There are no ERROR, WARN, stack_trace or SOAPFaults in logs\", function () {\r",
													"            for (log of logs) {\r",
													"                pm.expect(log.level).eql(\"INFO\");\r",
													"                pm.expect(typeof log.stack_trace ).eql(\"undefined\");\r",
													"                if ('ws_response_message' in log) {\r",
													"                    pm.expect(log.ws_response_message.soapFault, 'response SOAP fault must be null').to.be.eql(null);\r",
													"                }\r",
													"                if ('ws_request_message' in log) {\r",
													"                    pm.expect(log.ws_request_message.soapFault, 'request SOAP fault must be null').to.be.eql(null);\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"\r",
													"        utils.testLogs(logs, pm, 150);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/rest/status/{{dex-endpoint}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"status",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC_01b Connectivity Test is Successful to dex-dev",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var echoBack;\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response).to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is same as sent\", function () {\r",
													"    var response = utils.removeNS(xml2Json(responseBody));\r",
													"    var request = utils.removeNS(xml2Json(pm.request.body));\r",
													"    echoBack = request['Envelope']['Body']['ConnectivityTestRequest']['EchoBack'] \r",
													"    pm.expect(response['Envelope']['Body']['ConnectivityTestResponse']['EchoBack']).to.eql(echoBack);\r",
													"});\r",
													"\r",
													"utils.testSLA(pm, 500);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        pm.test(\"Logs are an array of objects\", function () {\r",
													"            pm.expect(logs).to.be.an('array');\r",
													"            pm.expect(logs[0]).to.be.an(\"object\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"There are no ERROR, WARN, stack_trace or SOAPFaults in logs\", function () {\r",
													"            for (log of logs) {\r",
													"                pm.expect(log.level).eql(\"INFO\");\r",
													"                pm.expect(typeof log.stack_trace ).eql(\"undefined\");\r",
													"                if ('ws_response_message' in log) {\r",
													"                    pm.expect(log.ws_response_message.soapFault, 'response SOAP fault must be null').to.be.eql(null);\r",
													"                }\r",
													"                if ('ws_request_message' in log) {\r",
													"                    pm.expect(log.ws_request_message.soapFault, 'request SOAP fault must be null').to.be.eql(null);\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"        wsReq = utils.getWsRequest(logs);\r",
													"        pm.test(\"First log EndPoint Type is INBOUND to SERVER\", function () {\r",
													"            pm.expect(wsReq[0].ws_request_message.direction).to.eql(\"INBOUND\");\r",
													"            pm.expect(wsReq[0].ws_request_message.endpointType).to.eql(\"SERVER\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"First log MessageID Matches inbound MessageID\", function () {\r",
													"            pm.expect(wsReq[0].ws_request_message.soapHeaders.MessageID).to.eql(pm.environment.get(\"testMessageId\"));\r",
													"        });\r",
													"\r",
													"        var wsData = utils.getWsResponse(logs);\r",
													"        pm.test(\"Second log Response is OUTBOUND SERVER\", function () {\r",
													"            pm.expect(wsData[0].ws_response_message.direction).to.eql(\"OUTBOUND\");\r",
													"            pm.expect(wsData[0].ws_response_message.endpointType).to.eql(\"SERVER\");\r",
													"        });\r",
													"\r",
													"        // TBD: ConnectivityTest Response Logging, not part of POC\r",
													"        // txData = utils.getTxData(logs);\r",
													"        // pm.test(\"TxData log to have transactionData.requestHL7Message == request.echoBack\", function() {\r",
													"        //     pm.expect(txData[0]).to.have.nested.property('transactionData.requestHL7Message');\r",
													"        //     pm.expect(txData[0].transactionData.requestHL7Message).to.be.eql(echoBack)\r",
													"        // });\r",
													"\r",
													"        utils.testLogs(logs, pm, 150);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"host": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Host",
												"value": "{{hostHeader}}"
											},
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n    <soap:Header>\r\n        <Action xmlns=\"http://www.w3.org/2005/08/addressing\">urn:cdc:iisb:2014:IISPortType:ConnectivityTestRequest</Action>\r\n        <MessageID xmlns=\"http://www.w3.org/2005/08/addressing\">{{testMessageId}}</MessageID>\r\n        <To xmlns=\"http://www.w3.org/2005/08/addressing\">http://www.w3.org/2005/08/addressing/anonymous</To>\r\n        <HubRequestHeader xmlns=\"urn:cdc:iisb:hub:2014\">\r\n            <DestinationId>{{dex-endpoint}}</DestinationId>\r\n        </HubRequestHeader>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <ConnectivityTestRequest xmlns=\"urn:cdc:iisb:2014\" xmlns:ns2=\"urn:cdc:iisb:hub:2014\" xmlns:ns3=\"urn:cdc:iisb:2011\">\r\n            <EchoBack>Wishing {{host}}:{{port}} an Audacious Hello at {{$isoTimestamp}}!</EchoBack>\r\n        </ConnectivityTestRequest>\r\n    </soap:Body>\r\n</soap:Envelope>\r\n"
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/IISHubService",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"IISHubService"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Tus-Resumable contains 1.0.0\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Tus-Resumable\")).is.eql(\"1.0.0\");\r",
													"});\r",
													"pm.test(\"Check Tus-Version contains 1.0.0\", function() {\r",
													"    pm.expect(pm.response.headers.get(\"Tus-Version\")).is.eql(\"1.0.0\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "OPTIONS",
										"header": [],
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/upload/dex",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"upload",
												"dex"
											]
										}
									},
									"response": []
								},
								{
									"name": "ADS Status Request to DEX",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var echoBack;\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response).to.have.status(200);\r",
													"});\r",
													"\r",
													"utils.testSLA(pm, 500);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        pm.test(\"Logs are an array of objects\", function () {\r",
													"            pm.expect(logs).to.be.an('array');\r",
													"            pm.expect(logs[0]).to.be.an(\"object\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"There are no ERROR, WARN, stack_trace or SOAPFaults in logs\", function () {\r",
													"            for (log of logs) {\r",
													"                pm.expect(log.level).eql(\"INFO\");\r",
													"                pm.expect(typeof log.stack_trace ).eql(\"undefined\");\r",
													"            }\r",
													"        });\r",
													"\r",
													"        utils.testLogs(logs, pm, 150);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid OAuth Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Has Error\", function () {\r",
													"    var resp = pm.response.json();\r",
													"    pm.expect(typeof resp.error, \"resp.error to be string\").to.eql(\"string\");\r",
													"    pm.expect(typeof resp.error_description, \"resp.error_description to be string\").to.eql(\"string\");\r",
													"    pm.expect(resp.error).to.be.eql(\"invalid_request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "password",
													"value": "grant_type",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/upload/oauth",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"upload",
												"oauth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid OAuth Request (params in Body)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Has OAuth Access Token\", function () {\r",
													"    var resp = pm.response.json();\r",
													"    pm.expect(typeof resp.access_token, \"resp.access_token to be string\").to.eql(\"string\");\r",
													"    pm.expect(typeof resp.refresh_token, \"resp.refresh_token to be string\").to.eql(\"string\");\r",
													"    pm.expect(typeof resp.token_type, \"resp.token_type to be string\").to.eql(\"string\");\r",
													"    pm.expect(resp.token_type).to.eql(\"Bearer\");\r",
													"    pm.expect(typeof resp.expires_in, \"resp.expires_in to be int\").to.eql(\"number\");\r",
													"    pm.expect(typeof resp.scope, \"resp.scope to be string\").to.eql(\"string\");\r",
													"    postman.setEnvironmentVariable(\"token\", resp.access_token);\r",
													"    postman.setEnvironmentVariable(\"refresh\", resp.refresh_token);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "username",
													"type": "text"
												},
												{
													"key": "password",
													"value": "grant_type",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/upload/oauth",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"upload",
												"oauth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid OAuth Request (params in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Has OAuth Access Token\", function () {\r",
													"    var resp = pm.response.json();\r",
													"    pm.expect(typeof resp.access_token, \"resp.access_token to be string\").to.eql(\"string\");\r",
													"    pm.expect(typeof resp.refresh_token, \"resp.refresh_token to be string\").to.eql(\"string\");\r",
													"    pm.expect(typeof resp.token_type, \"resp.token_type to be string\").to.eql(\"string\");\r",
													"    pm.expect(resp.token_type).to.eql(\"Bearer\");\r",
													"    pm.expect(typeof resp.expires_in, \"resp.expires_in to be int\").to.eql(\"number\");\r",
													"    pm.expect(typeof resp.scope, \"resp.scope to be string\").to.eql(\"string\");\r",
													"    postman.setEnvironmentVariable(\"token\", resp.access_token);\r",
													"    postman.setEnvironmentVariable(\"refresh\", resp.refresh_token);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "username",
													"type": "text"
												},
												{
													"key": "password",
													"value": "grant_type",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/upload/oauth?username=username&password=password",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"upload",
												"oauth"
											],
											"query": [
												{
													"key": "username",
													"value": "username"
												},
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DEX Submissions",
							"item": [
								{
									"name": "Write RI Submission to DEX Mock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var failed = false;\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    try {\r",
													"        pm.response.to.have.status(200);\r",
													"    } catch (err) {\r",
													"        failed = true;\r",
													"        throw err;\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    checkDexResponse(pm, 1781578);\r",
													"});\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 300000);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 300000);\r",
													"    });\r",
													"}\r",
													"\r",
													" if(pm.environment.get(\"testingEnvironment\") !== \"test\") moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "routineImmunization",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MAA_16M.zip"
												},
												{
													"key": "period",
													"value": "2023Q1",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "XXA_20230331_20230415_Z.zip",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write covidall Submission to DEX Mock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    checkDexResponse(pm, 844);\r",
													"});\r",
													"\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 300000);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 300000);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "covidallMonthlyVaccination",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MonthlyAllCOVID_ARA_2022SEP.csv"
												},
												{
													"key": "period",
													"value": "2022-SEP",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "MonthlyAllCOVID_XXA_2022SEP.csv",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write covidbridge Submission to DEX Mock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    checkDexResponse(pm, 323);\r",
													"});\r",
													"\r",
													"\r",
													"utils.testSLA(pm, 300000);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 300000);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "covidbridgeVaccination",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MonthlyBridgeCOVID_ARA_2022SEP.csv"
												},
												{
													"key": "period",
													"value": "2022-SEP",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "MonthlyBridgeCOVID_XXA_2022SEP.csv",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write RSV Submission to DEX Mock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    checkDexResponse(pm, 844);\r",
													"});\r",
													"\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 300000);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 300000);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "rsvPrevention",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MonthlyAllCOVID_ARA_2022SEP.csv"
												},
												{
													"key": "period",
													"value": "2022-SEP",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "MonthlyRSV_XXA_2022SEP.csv",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write RSV Submission to CDC DEX Staging Environment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Disable while DEX Staging is down.\r",
													"if (true) {\r",
													"    pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Response is As Expected\", function () {\r",
													"        checkDexResponse(pm, 844);\r",
													"    });\r",
													"\r",
													"\r",
													"    if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 300000);\r",
													"\r",
													"    const interval = setTimeout(() => {}, 3000);\r",
													"    async function moreTests() {\r",
													"        utils.getLogs(null, pm).then((logData) => {\r",
													"            logs = logData.json();\r",
													"            txData = utils.getTxData(logs);\r",
													"            pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"                pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"                pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"            });\r",
													"            utils.testLogs(logs, pm, 300000);\r",
													"        });\r",
													"    }\r",
													"\r",
													"    if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "rsvPrevention",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MonthlyAllCOVID_ARA_2022SEP.csv"
												},
												{
													"key": "period",
													"value": "2022-SEP",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "MonthlyRSV_XXA_2022SEP.csv",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/dex",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"dex"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write Flu Submission to DEX Mock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"        checkDexResponse(pm, 844);\r",
													"});\r",
													"\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 300000);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 300000);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "influenzaVaccination",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MonthlyAllCOVID_ARA_2022SEP.csv"
												},
												{
													"key": "period",
													"value": "2022-SEP",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "MonthlyFlu_XXA_2022SEP.csv",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write Bad Submission to DEX Mock",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    var metadata = pm.response.json();\r",
													"\r",
													"    pm.expect(metadata.message).to.match(/^.*Filename.*is in wrong format.*$/m);\r",
													"    pm.expect(metadata.message).to.match(/^.*Entity ID.*does not match Entity.*in filename.*$/m);\r",
													"    pm.expect(metadata.message).to.match(/^.*File date from filename.*does not match period.*$/m);\r",
													"    pm.expect(metadata.error).to.be.eql(\"Multiple Errors in Metadata\");\r",
													"});\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 1000);\r",
													"\r",
													"const interval = setTimeout(() => { }, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function () {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 1000);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "routineImmunization",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MonthlyAllCOVID_ARA_2022SEP.csv"
												},
												{
													"key": "period",
													"value": "2023Q1",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "RIA_16M.zip",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Write Bad Submission to DEX Mock with Force",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"utils.setup(pm);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is As Expected\", function () {\r",
													"    checkDexResponse(pm, 1781578);\r",
													"});\r",
													"\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) utils.testSLA(pm, 300000);\r",
													"\r",
													"const interval = setTimeout(() => {}, 3000);\r",
													"async function moreTests() {\r",
													"    utils.getLogs(null, pm).then((logData) => {\r",
													"        logs = logData.json();\r",
													"        txData = utils.getTxData(logs);\r",
													"        pm.test(\"Log does not contain HL7 Error\", function() {\r",
													"            pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(false);\r",
													"            pm.expect(txData[0].transactionData.hl7Error).to.be.eql(\"\");\r",
													"        });\r",
													"        utils.testLogs(logs, pm, 300000);\r",
													"    });\r",
													"}\r",
													"\r",
													"if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) moreTests();\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Message-ID",
												"value": "Basic Submission MAA/routineImmuniziation/MAA_16M.zip/2023Q1/RIA_16M.zip"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "facilityId",
													"value": "XXA",
													"type": "text"
												},
												{
													"key": "reportType",
													"value": "routineImmunization",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "MAA_16M.zip"
												},
												{
													"key": "period",
													"value": "2023Q1",
													"type": "text"
												},
												{
													"key": "filename",
													"value": "XXA_16M.xxx",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}:{{port}}/rest/ads/{{dex-endpoint}}?force=true",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"port": "{{port}}",
											"path": [
												"rest",
												"ads",
												"{{dex-endpoint}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"checkDexResponse = function (pm, fileSize) {",
									"    var metadata = pm.response.json();",
									"    try {",
									"        pm.expect(metadata.meta_destination_id, \"meta_destination_id\").to.match(/ndlp|test/);",
									"        pm.expect(metadata.meta_ext_source, \"meta_ext_source\").to.be.eql(\"IZGW\");",
									"        pm.expect(metadata.meta_ext_sourceversion, \"meta_ext_sourceversion\").to.be.eql(ADS_SOURCE_VERSION);",
									"        pm.expect(metadata.meta_ext_filename, \"meta_ext_filename\").to.be.eql(pm.request.body.formdata.get(\"filename\"));",
									"        ",
									"        pm.expect(metadata.meta_username, \"meta_username\").to.contain(\"testing.izgateway.org\");",
									"",
									"        pm.expect(metadata.izgw_route_id, \"izgw_route_id\").to.match(/ndlp-izgw-ri|ndlp-izgw-flu|azurite|azurite_http|dex-dev|dex-stg|dex/);",
									"        pm.expect(metadata.izgw_ipaddress, \"izgw_ipaddress\").to.match(/^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/);",
									"        pm.expect(metadata.izgw_uploaded_timestamp, \"izgw_uploaded_timestamp\").to.be.not.eql(null);",
									"        ",
									"        // Filesizes on unix differ by one from Windows, unsure why.",
									"        pm.expect(Math.abs(fileSize - metadata.izgw_filesize), \"izgw_filesize\").to.be.lessThan(4);",
									"        pm.expect(metadata.meta_ext_submissionperiod, \"meta_ext_submissionperiod\").to.be.eql(pm.request.body.formdata.get(\"period\"));",
									"        pm.expect(metadata.meta_ext_event, \"meta_ext_event\").to.be.eql(pm.request.body.formdata.get(\"reportType\"));",
									"        pm.expect(metadata.meta_ext_entity, \"meta_ext_entity\").to.be.eql(pm.request.body.formdata.get(\"facilityId\"));",
									"        pm.expect(metadata.received_filename, \"recieved_filename\").to.be.eql(pm.request.body.formdata.get(\"filename\"));",
									"        pm.expect(metadata.sender_id, \"sender_id\").to.be.eql(\"IZGW\");",
									"        pm.expect(metadata.data_producer_id, \"data_producer_id\").to.be.eql(pm.request.body.formdata.get(\"facilityId\"));",
									"        pm.expect(metadata.data_producer_id, \"jurisdiction\").to.be.eql(pm.request.body.formdata.get(\"facilityId\"));",
									"        pm.expect(metadata.version, \"version\").to.be.eql(\"2.0\");",
									"        pm.expect(metadata.data_stream_route, \"data_stream_route\").to.match(/other|csv/);",
									"        pm.expect(metadata.data_stream_id, \"data_stream_id\").to.match(",
									"            /routine-immunization|covid-bridge-vaccination|covid-all-monthly-vaccination|rsv-prevention|influenza-vaccination/);",
									"    } catch (err) {",
									"        console.log(\"Response\", pm.response, pm.response.text());",
									"        if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) {",
									"            utils.getLogs(null, pm).then((logData) => {",
									"                logs = logData.json();",
									"                console.log(\"Logs\", logs);",
									"            });",
									"        }",
									"        throw err;",
									"    }",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Mock IIS Tests",
					"item": [
						{
							"name": "TC_MOCK_01: Query for matching patient, w/ Address, confirm one found with IZ history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [\"100000317^^^MYEHR^MR\"], \"AA\", \"OK\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|100000317^^^MYEHR^MR|CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;\r\n      </urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_02a: Query for matching patient, w/o identifier or Address, confirm one found with IZ history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [\"100000317^^^MYEHR^MR\"], \"AA\", \"OK\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f9|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859||CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_02b: Query for matching patient, by Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [\"100000317^^^MYEHR^MR\"], \"AA\", \"OK\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f9|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|100000317^^^MYEHR^MR&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_03a: - Bad Street Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F|1664 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_03b:- Incorrect City",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Bobbyiston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_03c:- Incorrect Zip Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^ND^58802^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_03d:- Incorrect State",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^NC^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_04a: Query for matching patient, w/ incorrect DOB, confirm not found with IZ history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19610507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_04b: Query for matching patient, w/ incorrect Name (within limits), confirm one found with IZ history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [\"100000317^^^MYEHR^MR\"], \"AA\", \"OK\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|100000317^^^MYEHR^MR|CuyahogaAIRA^MarnAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;\r\n</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_04c: Query for matching patient, w/ incorrect Name (exceeds limits), confirm NOT found with IZ history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|CuyahogaAIRA^MarRA^MalkaAIRA^^^^L|CuyahoA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_05a: Query for multiple matching patients <= 3, confirm multiple multiple PID and NK1 segments returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [\"100041514^^^MYEHR^MR\",\"100041533^^^MYEHR^MR\"], \"AA\", \"OK\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859||NavarroAIRA^ZadorAIRA^VaIdaAIRA^^^^L||20010810|M&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_05b: Query for multiple matching patients > 3, confirm too many (TM) error returned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"TM\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859||FagenAIRA^RudraniAIRA^^^^L||20210102|F&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_06: Query for not-matching patient, conform not found return",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AA\", \"NF\", \"\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859|234820^^^MYEHR^MR|NotFoundAIRA^NotFoundAIRA^MalkaAIRA^^^^L|NotFoundAIRA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_07a: - Missing Sex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AE\", null, \"ERR||QPD^1^7|101^Required Field Missing^HL70357|E||||Missing Required QPD Parameter: Sex\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859||CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507||1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_07b: - Missing Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AE\", null, \"ERR||QPD^1^4|101^Required Field Missing^HL70357|E||||Missing Required QPD Parameter: Name\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859||||19600507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_07c: - Missing DOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AE\", null, \"ERR||QPD^1^6|101^Required Field Missing^HL70357|E||||Missing Required QPD Parameter: Date of Birth\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD|Z34^Request Immunization History^CDCPHINVS|37374859||CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M||F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_07d: - Missing Query Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AE\", null, \"ERR||QPD^1^1|101^Required Field Missing^HL70357|E||||Missing Required QPD Parameter: Query Name\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;QPD||37374859||CuyahogaAIRA^MarnyAIRA^MalkaAIRA^^^^L|CuyahogaAIRA^MarnyAIRA^^^^^M|19600507|F|1663 Persoon Ave^^Williston^ND^58801^USA^L&#xd;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_08: Query for patient with missing QPD segment, confirm missing segment returned and 100 error code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AE\", null, \"ERR||QPD^1^1|100^Segment Sequence Error^HL70357|E||||Missing QPD Segment\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||QBP^Q11^QBP_Q11|ea3fa2e9-5d26-4ab1-877a-6bef40c575f8|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS&#x0d;RCP|I|5^RD&amp;records&#xd;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC_MOCK_09: Issue VXU for patient, confirm AR returned on message not supported and 200 error code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"utils.testHL7RSP(pm.response.text(), pm.request.body, [], \"AE\", null, \"ERR||MSH^1^9|200^Unsupported Message Type^HL70357|E||||Mock does not handle VXU Messages\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"utils.setup(pm, \"dev\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Host",
										"value": "{{hostHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>MSH|^~\\&amp;|IZGW|IZGW|TEST|MOCK|202204261522-0400||VXU^V04^VXU_V04|bd4ffcb7-8d37-4384-b642-add379877a2e|P|2.5.1|||ER|AL|||||Z22^CDCPHINVS&#x0d;PID|1||432155^^^dcs^MRS||FagenAIRA^SophoclesAIRA^JerrieAIRA^^^^L|FagenAIRA^SophoclesAIRA^^^^^M |19760128|M||ASIAN|1760 Ve Marne Ln^^Fargo^ND^58104^^L||^PRN^PH^^^111^2320112|||||||||not HISPANIC&#x0d;NK1|1|FagenAIRA^SophoclesAIRA^^^^^L|MTH^Mom^HL70063|1760 Ve Marne Ln^^Fargo^ND^58104^^L &#x0d;ORC|RE||65930^DCS||||||20120113|^FagenAIRA^SophoclesAIRA||^FagenAIRA^SophoclesAIRA^^^^^^^ ^^^^^^^^^^^MD|||||||||Dabig Clinic System&#x0d;RXA|0|1|20040515||08^08^CVX|.05|ml||01^historical^NIP001|||||||||||CP|A&#x0d;RXR|C28161^IM^NCIT^IM^^HL70162|RT^Right Thigh^HL70163&#x0d;OBX|1|CE|64994-7^Eligibility Status^LN|1|V02^Medicaid^HL70064||||||F||||||VXC40^vaccine level^CDCPHINVS&#x0d;OBX|2|DT|29769-7^VIS presented^LN|2|20120113||||||F&#x0d;OBX|3|CE|69764-9 ^Document type^LN|2|253088698300026411121116^Multivaccine VIS^cdcgs1vis||||||F &#x0d;ORC|RE||65949^DCS||||||20120113|^FagenAIRA^SophoclesAIRA||^FagenAIRA^SophoclesAIRA^^^^^^^ ^^^^^^^^^^^MD|||||||||Dabig Clinic System&#x0d;OBX|4|CE|64994-7^Eligibility Status^LN|1|V02^Medicaid^HL70064||||||F||||||VXC40^vaccine level^CDCPHINVS&#x0d;OBX|5|DT|29769-7^VIS presented^LN|2|20120113||||||F OBX|6|CE|69764-9^Eligibility Status^LN|2|253088698300026411121116^Multivaccine VIS^cdcgs1vis||||||F&#x0d;</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"IISHubService"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"utils.testHl7Error = async function (pm, hl7Error) {\r",
									"    if (!pm.environment.get(\"host\").endsWith(\"phiz-project.org\")) {\r",
									"        utils.getLogs(null, pm).then((logData) => {\r",
									"            logs = logData.json();\r",
									"            txData = utils.getTxData(logs);\r",
									"            pm.test(\"Log does not contain HL7 Error\", function() {\r",
									"                pm.expect(txData[0].transactionData.hasHL7Error).to.be.eql(hl7Error != \"\");\r",
									"            });\r",
									"            pm.test(\"HL7 Error is '\" + hl7Error + \"'\", function() {\r",
									"                pm.expect(txData[0].transactionData.hl7Error).to.be.eql(hl7Error);\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"utils.parseHL7 = function (hl7Message) {\r",
									"    hl7Message = hl7Message.replaceAll(\"&#x0d;\", \"\\r\");\r",
									"    hl7Segments = hl7Message.split(/[\\r\\n]/);\r",
									"    segments = new Object();\r",
									"    for (seg of hl7Segments) {\r",
									"        parts = seg.split(/\\|/);\r",
									"        fields = { \"field\": parts, \"value\": seg };\r",
									"        name = parts[0];\r",
									"        if (segments[name] == undefined) {\r",
									"            segments[name] = new Array();\r",
									"        }\r",
									"        segments[name].add(fields);\r",
									"    }\r",
									"    return segments;\r",
									"}\r",
									"\r",
									"utils.testHL7RSP = function (resp, req, pids, ack, qak, hl7Error) {\r",
									"    var hl7Response = utils.removeNS(xml2Json(resp));\r",
									"    var hl7Message = hl7Response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
									"    var segments = this.parseHL7(hl7Message);\r",
									"\r",
									"    pm.test(\"The PID segment(s) contains the expected Medical Record Number(s) [\" + pids + \"]\", function () {\r",
									"        if (pids.length == 0) {\r",
									"            pm.expect(segments?.PID).eql(undefined);\r",
									"        } else {\r",
									"            pm.expect(segments?.PID?.length).eql(pids.length);\r",
									"        }\r",
									"        for (i = 0; i < pids.length; i++) {\r",
									"            pm.expect(segments?.PID[i].field[3]).eql(pids[i]);\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // The MSA segment has an application acknowledgement code\r",
									"    pm.test(\"There is 1 MSA segment and it has an \" + ack + \" in field 1\", function () {\r",
									"        pm.expect(segments?.MSA?.[0]?.field[1]).eql(ack);\r",
									"    });\r",
									"\r",
									"    if (ack == \"AA\") {\r",
									"        // There is 1 QPD segment and it matches the initial QPD segment\r",
									"        var request = this.removeNS(xml2Json(req));\r",
									"        var hl7Request = request['Envelope']['Body']['SubmitSingleMessageRequest']['Hl7Message'];\r",
									"        var requestQPD = utils.parseHL7(hl7Message)?.QPD?.[0];\r",
									"        pm.test(\"There is 1 QPD segment and it matches the request QPD segment\", function () {\r",
									"            pm.expect(segments?.QPD?.length).eql(1);\r",
									"            pm.expect(segments?.QPD[0].value).eql(requestQPD.value);\r",
									"        });\r",
									"        // The QAK segment has the right response\r",
									"        pm.test(\"There is 1 QAK segment and it has an \"+qak+\" in field 2\", function () {\r",
									"            pm.expect(segments?.QAK?.[0]?.field[2]).eql(qak);\r",
									"        });\r",
									"    }\r",
									"    if (hl7Error == \"\") {\r",
									"        pm.test(\"There is no ERR segment\", function () {\r",
									"            pm.expect(segments?.ERR?.[0]?.value).eql(undefined);\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"There is an ERR segment and the Segment is \" + hl7Error, function () {\r",
									"            pm.expect(segments?.ERR[0].value).eql(hl7Error);\r",
									"        });\r",
									"\r",
									"    }\r",
									"    this.testHl7Error(pm, hl7Error);\r",
									"}\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"utils.testSLA(pm, LONG_SLA);\r",
									"\r",
									"const interval = setTimeout(() => {}, 3000);\r",
									"\r",
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Not Working",
			"item": [
				{
					"name": "Blacklist a User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/rest/access/blacklist?user=epicenter.stchealthops.com",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"rest",
								"access",
								"blacklist"
							],
							"query": [
								{
									"key": "user",
									"value": "epicenter.stchealthops.com"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var goodResponse =",
					"    \"MSH|^~\\\\&|IRIS IIS|IRIS||IZG|20220205||RSP^K11^RSP_K11|20210330093013AZQ231|P|2.5.1|||||||||Z32^CDCPHINVS\\rMSA|AA|20210330093013AZQ231||0||0^Message Accepted^HL70357\\rQAK|20210330093013AZQ231|NF|Z34^Request Complete Immunization history^CDCPHINVS\\rQPD|Z34^Request Immunization History^CDCPHINVS|20210330093013IA231|112258-9^^^IA^MR|JohnsonIZG^JamesIZG^AndrewIZG^^^^L|LeungIZG^SarahIZG^^^^^M|20160414|M|Main Street&&123^^Adel^IA^50003^^L|^PRN^PH^^^555^5551111|Y|1\";",
					"pm.collectionVariables.set(\"GoodResponse\", goodResponse)",
					"pm.collectionVariables.set(\"GoodResponseLF\", goodResponse.replace(\"\\r\", \"\\n\"))",
					"pm.collectionVariables.set(\"GoodResponseCRLF\", goodResponse.replace(\"\\r\", \"\\r\\n\"))",
					"",
					"var goodRequest = pm.collectionVariables.get(\"GoodMessage\");",
					"pm.collectionVariables.set(\"GoodMessageLF\", goodRequest.replace(\"\\r\", \"\\n\"))",
					"pm.collectionVariables.set(\"GoodMessageCRLF\", goodRequest.replace(\"\\r\", \"\\r\\n\"))",
					"",
					"var tooLarge = goodResponse.replace('&|', \"&amp;|\").replace('&&','&amp;&amp;');",
					"var last;",
					"var maxLength = 65536;",
					"",
					"LONG_SLA = 1000;",
					"BASE_SLA = 500; // Change back to 250 after performance fix",
					"TX_SLA = 250; // Change back to 150 after performance fix",
					"",
					"for (i = 0; tooLarge.length < maxLength; i++) {",
					"    last = tooLarge;",
					"    tooLarge = tooLarge + tooLarge;",
					"}",
					"",
					"pm.collectionVariables.set(\"TooLargeMessage\", tooLarge);",
					"pm.collectionVariables.set(\"IisTooLargeMessage\", last);",
					"toLarge = last = \"\";",
					"",
					"pm.collectionVariables.set(\"hex0b\", \"\\u000b\");",
					"pm.collectionVariables.set(\"hex1b\", \"\\u001c\");",
					"",
					"theLogs = null;",
					"",
					"var env = pm.environment.get(\"testingEnvironment\");",
					"var CLASSNAME = /^[a-zA-Z_][a-zA-Z_0-9]*(\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;",
					"var JAVA_FILENAME = /^[a-zA-Z_][a-zA-Z_0-9]*.java$/;",
					"var POSITIVE_NUMBER = /^\\d+$/;",
					"var TIMESTAMP = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d[0-5]\\d|Z)/;",
					"var POSITIVE_NUMBERS = /^\\d+(,\\d+)*$/;",
					"var EVENTID_NUMBER = /^\\d+.\\d+$/;",
					"var JAVA_IDENTIFIER = /^[a-zA-Z_][a-zA-Z_0-9]*$/;",
					"var THREAD_NAME = /^[\\-a-zA-Z_0-9. ]*$/;",
					"var HTTPURL = /^(https?:\\/\\/[a-zA-Z0-9\\-]+(\\.[a-zA-Z0-9\\-_%]+)*)?(:[0-9]+)?(\\/[\\-a-zA-Z0-9-_%\\.]*)*$/;",
					"var DESTID = /^.{2,16}$/;",
					"var DESTIDLC = /^[-a-z_0-9]{2,16}$/;",
					"var DESTIDUC = /^[-A-Z_0-9]{2,16}$/;",
					"var INOROUT = /^INBOUND|OUTBOUND$/;",
					"var CLIENTORSERVER = /^CLIENT|SERVER$/;",
					"var YYYY_MM_DD = /^20[2-9][0-9]-[01][0-9]-[0-3][0-9]$/;",
					"var FACID = /[0-9A-Z]+/;",
					"var HL7REQMESSAGE = /^(MSH\\|.*(QBP|VXU|RSP)[\\s\\S]*)|Wishing[\\s\\S]*$/;",
					"var HL7ERROR = /^(MSH\\|[\\s\\S]*MSA\\|[\\s\\S]*)|$/;",
					"var BOOLEAN = /^true|false$/;",
					"var MESSAGE_TYPE = /^submitSingleMessage|connectivityTest|invalidRequest|ads|\\/rest\\/.*$/;",
					"var IPADDR = /^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/;",
					"var UUID = /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/;",
					"var DNS_NAME = /^[a-z0-9\\-]{2,}(\\.[a-z0-9\\-]+)*$|^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/;",
					"var COMPUTER_NAME = /^[A-Za-z0-9\\-]{2,}(\\.[A-Za-z0-9\\-]+)*$|^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/;",
					"var COMMON_NAME = /^[a-z][a-z0-9\\-]*(\\.[a-z][a-z0-9\\-]*)*$/;",
					"ADS_SOURCE_VERSION = \"V2023-09-01\"; // Needs to have global scope",
					"",
					"function checkForPHI(caseName, value, pm) {",
					"    var failure = false;",
					"    pm.test('Logger-TC06/07' + caseName + ' Verify HL7 content in logs does not contain PII', function() {",
					"        if (value == null) {",
					"            return;",
					"        }",
					"        var segments = value.split(/[\\n\\r]/);",
					"        for (segment of segments) {",
					"            pm.expect(segment).to.match(/^|MSH|MSA|ERR|\\.\\.\\..*$/);",
					"            if (segment.match(/^ERR/)) {",
					"                var fields = segment.split(/\\|/);",
					"                if (fields.length > 3 && fields[3].length > 0) {",
					"                    components = fields[3].split(\"^\");",
					"                    pm.expect(components.length <= 1 || components[1].length == 0);",
					"                }",
					"            }",
					"        }",
					"    });",
					"}",
					"function testLogEntry(entry, pm, index) {",
					"    var success = false;",
					"    var failed = false;",
					"    function _test(n, f) {",
					"        success = false;",
					"        pm.test(n, f);",
					"        if (!success) failed = true;",
					"    }",
					"    if (entry['caller_class_name'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_class_name matching ' + CLASSNAME, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_class_name');",
					"            pm.expect(entry.caller_class_name).to.match(CLASSNAME);",
					"            success = true;",
					"        });",
					"    }",
					"    if (entry['caller_file_name'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_file_name matching ' + JAVA_FILENAME, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_file_name');",
					"            pm.expect(entry.caller_file_name).to.match(JAVA_FILENAME);",
					"            success = true;",
					"        });",
					"    }",
					"    if (entry['caller_line_number'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_line_number matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_line_number');",
					"            pm.expect(entry.caller_line_number).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"    }",
					"    if (entry['caller_method_name'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_method_name matching ' + JAVA_IDENTIFIER, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_method_name');",
					"            pm.expect(entry.caller_method_name).to.match(JAVA_IDENTIFIER);",
					"            success = true;",
					"        });",
					"    }",
					"    _test('Log Entry['+index+'] to contain level matching INFO|WARN|ERROR|DEBUG|TRACE', function () {",
					"        pm.expect(entry).to.have.nested.property('level');",
					"        pm.expect(entry.level).to.match(/INFO|WARN|ERROR|DEBUG|TRACE/);",
					"        success = true;",
					"    });",
					"    _test('Log Entry['+index+'] to contain level_value matching ' + POSITIVE_NUMBER, function () {",
					"        pm.expect(entry).to.have.nested.property('level_value');",
					"        pm.expect(entry.level_value).to.match(POSITIVE_NUMBER);",
					"        success = true;",
					"    });",
					"",
					"    _test('Log Entry['+index+'] to contain logger_name matching ' + CLASSNAME, function () {",
					"        pm.expect(entry).to.have.nested.property('logger_name');",
					"        pm.expect(entry.logger_name).to.match(CLASSNAME);",
					"        success = true;",
					"    });",
					"    _test('Log Entry['+index+'] to contain thread_name matching ' + THREAD_NAME, function () {",
					"        pm.expect(entry).to.have.nested.property('thread_name');",
					"        pm.expect(entry.thread_name).to.match(THREAD_NAME);",
					"        success = true;",
					"    });",
					"    _test('Log Entry['+index+'] to contain message', function () {",
					"        pm.expect(entry).to.have.nested.property('message');",
					"        success = true;",
					"    });",
					"    if (entry['ws_request_message'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain ws_request_message.direction matching INBOUND|OUTBOUND', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.direction');",
					"            pm.expect(entry.ws_request_message.direction).to.match(INOROUT);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.endpointAddress having a URL', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.endpointAddress');",
					"            pm.expect(entry.ws_request_message.endpointAddress).to.match(HTTPURL)",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.endpointType matching SERVER|CLIENT', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.endpointType');",
					"            pm.expect(entry.ws_request_message.endpointType).to.match(CLIENTORSERVER);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.eventId matching ' + EVENTID_NUMBER, function () {",
					"            if (!entry?.logger_name.endsWith(\".handshake\")) {",
					"                pm.expect(entry).to.have.nested.property('ws_request_message.eventId');",
					"                pm.expect(entry.ws_request_message.eventId).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            }",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.payload', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.payload');",
					"            success = true;",
					"        });",
					"        // Only check soapHeaders if present, they may not be if inbound Headers could",
					"        // not be parsed.",
					"        if (entry?.ws_request_message?.soapHeaders !== null) {",
					"            _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.Action', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.Action');",
					"                success = true;",
					"        });",
					"    ",
					"            if (entry?.ws_request_message?.soapHeaders?.FaultTo !== undefined) {",
					"                _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.FaultTo.Address having a URL', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.FaultTo.Address');",
					"                    pm.expect(entry.ws_request_message.soapHeaders.FaultTo.Address).to.match(HTTPURL);",
					"                    success = true;",
					"            });",
					"            }",
					"            // some test cases purposefully mess up the header",
					"            if (entry?.ws_request_message?.soapHeaders?.HubRequestHeader !== undefined && entry?.ws_request_message?.soapHeaders?.HubRequestHeader !== null) {",
					"                _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.HubRequestHeader.DestinationId matching .{2,7}', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.HubRequestHeader.DestinationId');",
					"                    // While we'd like to check for correct values, we also report INCORRECT Values in the DestinationId",
					"                    pm.expect(entry?.ws_request_message?.soapHeaders?.HubRequestHeader?.DestinationId).to.match(DESTID);",
					"                    success = true;",
					"                });",
					"            }",
					"",
					"            _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.MessageID', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.MessageID');",
					"                success = true;",
					"            });",
					"            // To is technically not required",
					"            if (entry?.ws_request_message.soapHeaders?.To !== undefined) {",
					"                _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.To matching a URL', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.To');",
					"                    pm.expect(entry.ws_request_message.soapHeaders.To).to.match(HTTPURL);",
					"                    success = true;",
					"                });",
					"            }",
					"        }",
					"    }",
					"    if (entry['ws_response_message'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain ws_response_message.direction matching INBOUND|OUTBOUND', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.direction');",
					"            pm.expect(entry.ws_response_message.direction).to.match(INOROUT);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.endpointAddress having a url', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.endpointAddress');",
					"            pm.expect(entry.ws_response_message.endpointAddress).to.match(HTTPURL)",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.endpointType', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.endpointType');",
					"            pm.expect(entry.ws_response_message.endpointType).to.match(CLIENTORSERVER);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.eventId', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.eventId');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.payload', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.payload');",
					"            success = true;",
					"        });",
					"        if (entry.ws_response_message.soapFault !== null) {",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Code', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Code');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail');",
					"                success = true;",
					"            });",
					"            if (entry?.ws_response_message?.soapFault?.Detail !== undefined) {",
					"                if (entry.ws_response_message.soapFault.Detail.DestinationConnectionFault !== undefined) {",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationId matching [a-z0-9_]{2,7}', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationId');",
					"                        pm.expect(entry.ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationId).to.match(DESTID);",
					"                        success = true;",
					"                    });",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationUri', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationUri');",
					"                        success = true;",
					"                    });",
					"                }",
					"                if (entry?.ws_response_message?.soapFault?.Detail?.HubClientFault !== undefined) {",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.HubClientFault.DestinationId matching [a-z0-9_]{2,7}', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.HubClientFault.DestinationId');",
					"                        pm.expect(entry.ws_response_message.soapFault.Detail.HubClientFault.DestinationId).to.match(DESTID);",
					"                        success = true;",
					"                    });",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.HubClientFault.DestinationUri matching https?://[a-zA-Z][a-zA-Z0-9\\-]*(\\.[a-zA-Z][a-zA-Z0-9\\-_%]*)*(:[0-9]+)?(/[a-zA-Z0-9\\-_%.]+)*', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.HubClientFault.DestinationUri');",
					"                        pm.expect(entry.ws_response_message.soapFault.Detail.HubClientFault.DestinationUri).to.match(HTTPURL);",
					"                        success = true;",
					"                    });",
					"                }",
					"            }",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Reason', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Reason');",
					"                success = true;",
					"            });",
					"        }",
					"",
					"        // Only check soapHeaders if present, they may be absent if inbound headers",
					"        // could not be parsed.",
					"        if (entry?.ws_response_message?.soapHeaders != null) {",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.Action', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.Action');",
					"                success = true;",
					"            });",
					"            // Only certain message types have a HubResponseHeader",
					"            if (entry?.ws_response_message?.soapHeaders?.HubResponseHeader !== undefined) {",
					"                _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.HubResponseHeader.DestinationId matching ' + DESTID, function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.HubResponseHeader.DestinationId');",
					"                    pm.expect(entry.ws_response_message.soapHeaders.HubResponseHeader.DestinationId).to.match(DESTID);",
					"                    success = true;",
					"                });",
					"                _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.HubResponseHeader.DestinationUri matching a URL', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.HubResponseHeader.DestinationUri');",
					"                    pm.expect(entry.ws_response_message.soapHeaders.HubResponseHeader.DestinationUri).to.match(HTTPURL);",
					"                    success = true;",
					"                });",
					"            }",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.MessageID', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.MessageID');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.RelatesTo', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.RelatesTo');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.To', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.To');",
					"                pm.expect(entry.ws_response_message.soapHeaders.To).to.match(HTTPURL);",
					"                success = true;",
					"            });",
					"        }",
					"    }",
					"",
					"    _test('Log Entry['+index+'] to contain eventId matching ' + EVENTID_NUMBER, function () {",
					"        pm.expect(entry, 'Expected log event to have eventId for message: \"' + entry.message + '\"').to.have.nested.property('eventId');",
					"        pm.expect(entry.eventId).to.match(EVENTID_NUMBER);",
					"        success = true;",
					"    });",
					"",
					"    if (entry['transactionData'] !== undefined) {",
					"        _test('Logging-TC_03 Log Entry['+index+'] to contain transactionData.dateTime matching ' + TIMESTAMP, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.dateTime');",
					"            pm.expect(entry.transactionData.dateTime).to.match(TIMESTAMP);",
					"            success = true;",
					"        });",
					"",
					"        if (entry?.transactionData?.destination?.connected) {",
					"            _test('Log Entry['+index+'] to contain transactionData.destinationID matching [-a-z_0-9]{2,7}', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destinationID');",
					"                pm.expect(entry.transactionData.destinationID).to.match(DESTIDLC);",
					"                success = true;",
					"            });",
					"            ",
					"            _test('Log Entry['+index+'] to contain transactionData.destinationURL matching https://[a-zA-Z][a-zA-Z0-9\\-]*(\\.[a-zA-Z][a-zA-Z0-9\\-_%]*)*(/[a-zA-Z0-9\\-_%.]+)*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destinationURL');",
					"                pm.expect(entry.transactionData.destinationURL).to.match(HTTPURL);",
					"                success = true;",
					"            });",
					"",
					"            _test('Log Entry['+index+'] to contain transactionData.source.cipherSuite matching TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_DHE_RSA_WITH_AES_256_GCM_SHA384|TLS_DHE_DSS_WITH_AES_256_GCM_SHA384|TLS_DHE_RSA_WITH_AES_128_GCM_SHA256|TLS_DHE_DSS_WITH_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256|INTERNAL_JAVA_CALL', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.source.cipherSuite');",
					"                pm.expect(entry.transactionData.source.cipherSuite).to.match(/^(TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_DHE_RSA_WITH_AES_256_GCM_SHA384|TLS_DHE_DSS_WITH_AES_256_GCM_SHA384|TLS_DHE_RSA_WITH_AES_128_GCM_SHA256|TLS_DHE_DSS_WITH_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256|INTERNAL_JAVA_CALL)$/);",
					"                success = true;",
					"            });",
					"",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.fips matching [-A-Z_0-9]{2,7}', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.fips');",
					"                pm.expect(entry.transactionData.destination.fips).to.match(DESTIDUC);",
					"                success = true;",
					"            });",
					"            _test('Logging-TC_05a Log Entry['+index+'] to contain transactionData.elapsedTimeIIS matching [1-9][0-9]*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.elapsedTimeIIS');",
					"                pm.expect(entry.transactionData.elapsedTimeIIS).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            });",
					"            _test('Logging-TC_05d Log Entry['+index+'] transactionData.elapsedTimeIIS + transactionData.elapsedTimeIIS = transactionData.elapsedTimeTotal', function () {",
					"                pm.expect(entry.transactionData.elapsedTimeIIS + entry.transactionData.elapsedTimeProcessing).to.eql(entry.transactionData.elapsedTimeTotal);",
					"                success = true;",
					"            });",
					"        }",
					"        // FacilityID is optional in some cases",
					"        if (entry?.transactionData?.facilityID != null) {",
					"            _test('Logging-TC_01g Log Entry['+index+'] to contain transactionData.facilityID matching [A-Z0-9]*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.facilityID');",
					"                pm.expect(entry.transactionData.facilityID).to.match(FACID);",
					"                success = true;",
					"            });",
					"        }",
					"        if (entry?.transactionData?.processError) {",
					"            _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.faultName and faultCode', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.faultName');",
					"                pm.expect(entry).to.have.nested.property('transactionData.faultCode');",
					"                success = true;",
					"            });",
					"        }",
					"        _test('Logging-TC_05b Log Entry['+index+'] to contain transactionData.elapsedTimeProcessing matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.elapsedTimeProcessing');",
					"            pm.expect(entry.transactionData.elapsedTimeProcessing).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_05c Log Entry['+index+'] to contain transactionData.elapsedTimeTotal matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.elapsedTimeTotal');",
					"            pm.expect(entry.transactionData.elapsedTimeTotal).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_08/09 Log Entry['+index+'] to contain transactionData.hasHL7Error matching ' + BOOLEAN, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.hasHL7Error');",
					"            pm.expect(entry.transactionData.hasHL7Error).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"",
					"        _test('Log Entry['+index+'] to contain transactionData.hasProcessError matching ' + BOOLEAN, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.hasProcessError');",
					"            pm.expect(entry.transactionData.hasProcessError).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.hl7Error matching ' + HL7ERROR, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.hl7Error');",
					"            pm.expect(entry.transactionData.hl7Error).to.match(HL7ERROR);",
					"            success = true;",
					"        });",
					"        if (transactionData?.prod == true) {",
					"            checkForPHI('a', entry.transactionData.hl7Error, pm);",
					"        }",
					"",
					"        _test('Log Entry['+index+'] to contain transactionData.messageId', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.messageId');",
					"            if (!entry.requestUri.endsWith('/dev/client_Service')) {",
					"                pm.expect(entry.transactionData.messageId.length).to.be.above(0);",
					"            }",
					"            success = true;",
					"        });",
					"        ",
					"        _test('Logging-TC_04 Log Entry['+index+'] to contain transactionData.messageType matching ' + MESSAGE_TYPE, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.messageType');",
					"            pm.expect(entry.transactionData.messageType).to.match(MESSAGE_TYPE);",
					"            success = true;",
					"        });",
					"        if (entry?.transactionData?.processError !== undefined && entry?.transactionData?.processError?.length > 0) {",
					"            _test('Logging-TC_02a Log Entry['+index+'] to contain transactionData.processError matching processErrorSummary + :  + processErrorDetail', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.processError');",
					"                if (entry?.transactionData?.processErrorDetail != null) {",
					"                    pm.expect(entry.transactionData.processError).to.be.eql(entry.transactionData.processErrorSummary + \": \" + entry.transactionData.processErrorDetail);",
					"                } else {",
					"                    pm.expect(entry.transactionData.processError).to.be.eql(entry.transactionData.processErrorSummary);",
					"                }",
					"                success = true;",
					"            });",
					"        }",
					"        _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.processErrorSummary', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.processErrorSummary');",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.processErrorDetail', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.processErrorDetail');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.prod matching ' + BOOLEAN, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.prod');",
					"            pm.expect(entry.transactionData.prod).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.replyTo', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.replyTo');",
					"            success = true;",
					"        });",
					"        if (entry?.transactionData?.requestHL7Message != null && entry?.transactionData?.requestHL7Message?.length != 0) {",
					"            // On an a fault, these values may not be present, so only execute if not an common Fault type",
					"            _test('Log Entry['+index+'] to contain transactionData.requestHL7Message matching ' + HL7REQMESSAGE, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.requestHL7Message');",
					"                pm.expect(entry.transactionData.requestHL7Message).to.match(HL7REQMESSAGE);",
					"                success = true;",
					"            });",
					"            if (entry?.transactionData?.prod == true) {",
					"                checkForPHI('b', entry.transactionData.requestHL7Message, pm);",
					"            }",
					"            _test('Logging-TC_10/11 Log Entry['+index+'] to contain transactionData.requestPayloadType matching VXU|QBP|Other', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.requestPayloadType');",
					"                pm.expect(entry.transactionData.requestPayloadType).to.match(/^VXU|QBP|ADS|Other$/);",
					"                if (entry.transactionData.requestHL7Message.match(/QBP/)) {",
					"                    pm.expect(entry.transactionData.requestPayloadType).to.match(/^QBP$/);",
					"                }",
					"                if (entry.transactionData.requestHL7Message.match(/VXU/)) {",
					"                    pm.expect(entry.transactionData.requestPayloadType).to.match(/^VXU$/);",
					"                }",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.requestPayloadSize matching [1-9][0-9]*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.requestPayloadSize');",
					"                pm.expect(entry.transactionData.requestPayloadSize).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.responseHL7Message matching MSH|.*MSA|.*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.responseHL7Message');",
					"                pm.expect(entry.transactionData.responseHL7Message).to.match(HL7ERROR);",
					"                success = true;",
					"            });",
					"            if (entry.transactionData?.prod == true) {",
					"                checkForPHI('c', entry.transactionData.responseHL7Message, pm);",
					"            }",
					"        }",
					"        _test('Log Entry['+index+'] to contain transactionData.responsePayloadSize matching [0-9]*', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.responsePayloadSize');",
					"            pm.expect(entry.transactionData.responsePayloadSize).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.responseReceived matching true|false', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.responseReceived');",
					"            pm.expect(entry.transactionData.responseReceived).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.serverMode matching dev|prod', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.serverMode');",
					"            pm.expect(entry.transactionData.serverMode).to.match(/^dev|prod$/);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.sourceHost', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.sourceHost');",
					"            success = true;",
					"        });",
					"        // Internal requests will come from internal server, which for performance testing",
					"        // will route through NLB rather than through 127.0.0.1",
					"        // When running in Docker Desktop, instead of 127.0.0.1, this will be 172.17.0.1",
					"        if (!entry?.requestUri.endsWith('/dev/IISService') && !entry?.requestUri.endsWith('/dev/client_Service')) {",
					"            _test('Log Entry['+index+'] to contain transactionData.sourceIP matching ' + IPADDR, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.sourceIP');",
					"                pm.expect(entry.transactionData.sourceIP).to.match(IPADDR);",
					"                success = true;",
					"            });",
					"        }",
					"        _test('Log Entry['+index+'] to contain transactionData.threadId', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.threadId');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.transactionId matching ' + UUID, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.transactionId');",
					"            pm.expect(entry.transactionData.transactionId).to.match(UUID);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.wsdlVersion', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.wsdlVersion');",
					"            success = true;",
					"        });",
					"",
					"        if (entry?.transactionData?.messageType != \"connectivityTest\") {",
					"            _test('Log Entry['+index+'] to contain requestMsh3', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh3');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh4', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh4');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh5', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh5');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh6', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh6');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh7', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh7');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh10', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh10');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh22', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh22');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh3', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh3');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh4', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh4');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh5', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh5');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh6', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh6');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh7', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh7');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh10', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh10');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh22', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh22');",
					"                success = true;",
					"            });",
					"        }",
					"",
					"        _test('Logging-TC_01a Log Entry['+index+'] to contain transactionData.source.ipAddress ' + IPADDR, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.ipAddress');",
					"            pm.expect(entry.transactionData.source.ipAddress).to.match(IPADDR);",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.host');",
					"            pm.expect(entry.transactionData.source.host).to.match(COMPUTER_NAME);",
					"            success = true;",
					"        });",
					"",
					"        _test('Logging-TC_01b Log Entry['+index+'] to contain transactionData.source.serialNumber matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.serialNumber');",
					"            pm.expect(entry.transactionData.source.serialNumber).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01c Log Entry['+index+'] to contain transactionData.source.organization', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.organization');",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01d Log Entry['+index+'] to contain transactionData.source.commonName matching ' + COMMON_NAME, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.commonName');",
					"            pm.expect(entry.transactionData.source.commonName).to.match(COMMON_NAME);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01e Log Entry['+index+']to contain transactionData.source.validFrom matching ' + TIMESTAMP, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.validFrom');",
					"            pm.expect(entry.transactionData.source.validFrom).to.match(TIMESTAMP);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01f Log Entry['+index+'] to contain transactionData.source.validTo matching ' + TIMESTAMP, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.validTo');",
					"            pm.expect(entry.transactionData.source.validTo).to.match(TIMESTAMP);",
					"            success = true;",
					"        });",
					"",
					"        // These cannot be tested if the transaction is not routed by IZGW (e.g., is the mock IIS), or does not",
					"        // have a destination url (as in Connectivity Testing).  NOTE: destination.id could be known but",
					"        // not configured with a valid url, url could be known but if no connected, no other data available.",
					"        if (entry?.transactionData?.serviceType == \"Gateway\" && entry?.transactionData?.destination?.connected != false) {",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.ipAddress ' + IPADDR, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.ipAddress');",
					"                pm.expect(entry.transactionData.destination.ipAddress).to.match(IPADDR);",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.host');",
					"                pm.expect(entry.transactionData.destination.host).to.match(DNS_NAME);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.serialNumber matching ' + POSITIVE_NUMBER, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.serialNumber');",
					"                pm.expect(entry.transactionData.destination.serialNumber).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.organization', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.organization');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.commonName matching ' + COMMON_NAME, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.commonName');",
					"                pm.expect(entry.transactionData.destination.commonName).to.match(COMMON_NAME);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+']to contain transactionData.destination.validFrom matching ' + TIMESTAMP, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.validFrom');",
					"                pm.expect(entry.transactionData.destination.validFrom).to.match(TIMESTAMP);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.validTo matching ' + TIMESTAMP, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.validTo');",
					"                pm.expect(entry.transactionData.destination.validTo).to.match(TIMESTAMP);",
					"                success = true;",
					"            });        ",
					"        }",
					"    }",
					"    if (entry?.ssl_trust !== undefined) {",
					"        _test('Log Entry['+index+'] to contain ssl_trust.auth_type', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.authType');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.certificates', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.certificates');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.location', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.location');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.pathCertificates', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.pathCertificates');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.trust_anchor_certificate', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.trustAnchorCertificate');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.trusted matching true|false', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.trusted');",
					"            pm.expect(entry.ssl_trust.trusted).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"    }",
					"    if (failed) {",
					"        console.log(\"Log Entry[\"+index+\"]:\", entry);",
					"    }",
					"}",
					"",
					"function json2xmlX(j, holder, i) {",
					"    var indent = (i === undefined) ? -1 : i;",
					"    var x = \"\";",
					"    for (var k in j) {",
					"        var needsEndTag = false;",
					"        if (k == \"$\" || k == \"_\") {",
					"            continue;",
					"        }",
					"        var stripParent = false;",
					"        var stripChildren = false;",
					"        var needsEndTag = false;",
					"        var hasChildren = false;",
					"        var output = null;",
					"        if (--holder.n == 0) {",
					"            stripParent = true;",
					"            holder.removed = k;",
					"        } else if (--holder.n == 0) {",
					"            stripParent = true;",
					"            stripChildren = true;",
					"            holder.removed = k + \"+\";",
					"        }",
					"        if (typeof(j[k]) == \"object\" || typeof(j[k] == \"string\")) {",
					"            output = \"\";",
					"            if (indent >= 0) {",
					"                output += \"\\n\";",
					"                output += \"                                      \".substring(0, indent);",
					"            }",
					"            output += \"<\" + k;",
					"            for (a in j[k].$) {",
					"                var output2 = \" \" + a + \"=\\\"\" + j[k].$[a] + \"\\\"\";",
					"                if (--holder.n != 0) {",
					"                    output += output2;",
					"                } else {",
					"                    holder.removed = output2;",
					"                }",
					"            }",
					"            output += \">\";",
					"            if (!stripParent) {",
					"                x += output;",
					"            } else {",
					"                holder.removed = output;",
					"            }",
					"            needsEndTag = true;",
					"        }",
					"        if (j[k]._ !== undefined) {",
					"            output = j[k]._;",
					"        } else if (typeof(j[k]) == \"string\") {",
					"            output = j[k];",
					"        } else {",
					"            output = \"\";",
					"        }",
					"        if (typeof(j[k]) == \"object\") {",
					"            var s = json2xmlX(j[k], holder, indent >= 0 ? indent + 2 : indent);",
					"            output += s;",
					"            hasChildren = s.length > 0;",
					"        }",
					"        if (!stripChildren) {",
					"            x += output;",
					"        } else {",
					"            holder.removed += output;",
					"        }",
					"        if ((typeof(j[k]) == \"object\" || typeof(j[k]) == \"string\") && !stripParent && needsEndTag) {",
					"            output = \"\";",
					"            if (indent >= 0 && hasChildren) {",
					"                output += \"\\n\" + \"                                      \".substring(0, indent);",
					"            }",
					"            output += \"</\" + k + \">\";",
					"            if (stripParent) {",
					"                holder.removed += ouput;",
					"            } else {",
					"                x += output;",
					"            }",
					"        }",
					"    }",
					"    return x;",
					"}",
					"const EmptyResponse = {",
					"    body: \"[]\",",
					"    json: function() {",
					"        return new Array(0);",
					"    }",
					"}",
					"",
					"",
					"var nsStack = new Array();",
					"var nsErrors = new Array();",
					"",
					"function isNSDefined(ns, path) {",
					"    for (i = nsStack.length - 1; i >= 0; --i) {",
					"        if (nsStack[i] === undefined) continue;",
					"        var decl = \"xmlns:\" + ns;",
					"        if (nsStack[i]?.[decl] !== undefined) {",
					"            // console.log('Found ' + ns + ' as ' + nsStack[i]?.[decl] + ' for ' + path);",
					"            return true;",
					"        }",
					"    }",
					"    // console.log('Did not find ' + ns + ' for ' + path + ' in ' + JSON.stringify(nsStack));",
					"    return false;",
					"}",
					"function checkXmlName(name, path) {",
					"    if (name.includes(\":\")) {",
					"        var ns = name.split(\":\")[0];",
					"        if (ns == \"xmlns\") return; ",
					"        if (ns == \"xml\") return;",
					"        // Look for xmlns declaration",
					"        if (!isNSDefined(ns, path)) {",
					"            nsErrors.push('Namespace ' + ns + ' is undefined on ' + path)",
					"        }",
					"    }",
					"}",
					"function checkNS(obj, path) {",
					"    // console.log({\"path\": path, \"obj\": obj, \"type\": typeof obj});",
					"    if (path == undefined) {",
					"        path = \"\";",
					"        nsErrors = new Array();",
					"    }",
					"    for (name in obj) {",
					"        var atts = obj[name]?.$;",
					"        if (atts !== undefined) nsStack.push(atts); ",
					"        if (name.includes(\":\")) {",
					"            checkXmlName(name, path + '/' + name);",
					"            if (typeof obj[name] == 'object') checkNS(obj[name], path + '/' + name);",
					"        } else if (name != '$') {",
					"            if (typeof obj[name] == 'object') checkNS(obj[name], path + '/' + name);",
					"        } else {",
					"            for (n in obj.$) {",
					"                if (n == '$') continue;",
					"                checkXmlName(n, path + '/@' + n);",
					"            }",
					"        }",
					"        if (atts !== undefined) nsStack.pop();",
					"    }",
					"    if (path == \"\" && nsErrors.length != 0) {",
					"        return nsErrors;",
					"    }",
					"    return null;",
					"}",
					"",
					"",
					"const Utils = {",
					"    json2xml: function (j, n, i) {",
					"        var holder = new Object();",
					"        if (n === undefined || n === null) {",
					"            holder.n = -1;",
					"        } else if (typeof(n) == \"object\") {",
					"            holder = n;",
					"        } else {",
					"            holder.n = n;",
					"        }",
					"        s = json2xmlX(j, holder, i);",
					"        if (!(\"removed\" in holder)) {",
					"            holder.removed = false;",
					"        }",
					"        return s;",
					"    },",
					"    setup: function (pm, dest) {",
					"        pm.environment.set(\"ts\", pm.variables.replaceIn('{{$isoTimestamp}}').replace(/[\\-:T]/g, \"\"));",
					"        pm.environment.set(\"testMessageId\", pm.info.requestName.split(\" \")[0]);",
					"        var x = setTimeout(() => { }, 500);",
					"        async function doResetLogs() {",
					"            await utils.resetLogs(pm, dest).catch(err => { console.log(\"Error in setup:\", err); });",
					"        };",
					"        doResetLogs();",
					"",
					"        clearTimeout(x);",
					"    },",
					"    checkNamespaces: function (pm) {",
					"        pm.test(\"No namespace errors in response\", function() {",
					"            var response = xml2Json(pm.response.text());",
					"            var result = checkNS(response);",
					"            try {",
					"                pm.expect(result).to.be.eql(null);",
					"            } catch (err) {",
					"                console.log(result);",
					"                throw err;",
					"            }",
					"        });",
					"    },",
					"    removeNS: function (obj, pm) {",
					"        for (name in obj) {",
					"            if (name == \"$\") {",
					"                continue;",
					"            }",
					"            if (name.includes(\":\")) {",
					"                var names = name.split(\":\");",
					"                var newName = names[1];",
					"                obj[newName] = obj[name];",
					"                delete obj[name];",
					"            }",
					"            utils.removeNS(obj[newName]);",
					"        }",
					"        return obj;",
					"    },",
					"    resetLogs: function (pm, dest) {",
					"        setTimeout(() => { }, 500);",
					"        var theUrl = 'https://' + pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\") + '/rest/logs';",
					"        if (dest !== null && dest !== undefined) {",
					"            theUrl = theUrl + \"?clear=\" + dest;",
					"        }",
					"        const resetLogRequest = {",
					"            url: theUrl,",
					"            method: 'DELETE',",
					"            certificate: pm.request.certificate",
					"        };",
					"",
					"        const reset = async () => {",
					"            const foo = this.reqPromise(pm, resetLogRequest);",
					"            const data = await foo.catch(err => { console.log(\"Error in resetLogs:\", err); });",
					"            return data;",
					"        };",
					"        return reset().then();",
					"    },",
					"    reqPromise: function (pm, urlPath) {",
					"        return new Promise((resolve, reject) => {",
					"            pm.sendRequest(urlPath, function (err, response) {",
					"                if (err) reject(err);",
					"                resolve(response);",
					"            });",
					"        });",
					"    },",
					"",
					"    isDeployed: function (pm) {",
					"        return pm.environment.get(\"host\").endsWith(\".phiz-project.org\") || \"true\" == pm.environment.get(\"skipLogs\");",
					"    },",
					"",
					"    getLogs: async function (search, pm) {",
					"        var done = false;",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"Log Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return new Array();",
					"        }",
					"        const searchLogRequest = {",
					"            url: pm.environment.get(\"protocol\") + '://' + pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\") + '/rest/logs' + (search != null ? '?search=' + search : ''),",
					"            method: 'GET',",
					"            certificate: pm.request.certificate",
					"        }",
					"",
					"        const getStuff = async () => {",
					"            const foo = this.reqPromise(pm, searchLogRequest);",
					"            const data = await foo.catch(err => { ",
					"                console.log(\"Error in getLogs:\", err); ",
					"                pm.test(\"Logs have data\", function() {",
					"                    pm.expect(err).eql(null);",
					"                });",
					"                return Object.create(EmptyResponse);",
					"            });",
					"            return data;",
					"        }",
					"        return getStuff();",
					"    },",
					"",
					"    getStatus: async function (search, pm, history) {",
					"        var done = false;",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"Log Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return new Array();",
					"        }",
					"        const getStatusRequest = {",
					"            url: pm.environment.get(\"protocol\") + '://'  + pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\") + (history ? '/rest/statushistory/dev' :  '/rest/status/dev'),",
					"            method: 'GET',",
					"            certificate: pm.request.certificate",
					"        }",
					"",
					"        const getStatusResult = async () => {",
					"            const foo = this.reqPromise(pm, getStatusRequest);",
					"            const data = await foo.catch(err => { ",
					"                console.log(\"Error in getStatus:\", err); ",
					"                return new Array();",
					"            });",
					"            return data;",
					"        }",
					"        return getStatusResult();",
					"    },",
					"",
					"    getKey: function (logs, key1, key2) {",
					"        var result = new Array();",
					"        for (log of logs) {",
					"            if (key1 in log) {",
					"                result.add(log);",
					"            } ",
					"            if (key2 !== undefined && key2 in log) {",
					"                result.add(log);",
					"            }",
					"        }",
					"        return result;",
					"",
					"    },",
					"    getTxData: function (logs, all) {",
					"        // If all = true, do NOT filter background status checks from txData.",
					"        if (all === undefined) {",
					"            all = false;",
					"        }",
					"        data = this.getKey(logs, \"transactionData\");",
					"        if (all) return data;",
					"        var newData = new Array();",
					"        for (a of data) {",
					"            if (a.transactionData === undefined) continue;",
					"            if (parseInt(a.eventId.split('.')[1]) > 2) newData.add(a);",
					"        }",
					"        return newData;",
					"    },",
					"    getWsRequest: function (logs) {",
					"        // Handle 1.x style for comparing test results, and check for 2.x style for getting them",
					"        var v1Result = this.getKey(logs, \"ws_request_message\");",
					"        var logs = this.getTxData(logs);",
					"        var v2Refined = new Array();",
					"        for (l in logs) {",
					"            if (\"serverRequest\" in logs[l]?.transactionData) {",
					"                var serverRequest = logs[l]?.transactionData?.serverRequest;",
					"                if (serverRequest != null && serverRequest?.ws_request_message != null) {",
					"                    newObject = { \"ws_request_message\": serverRequest?.ws_request_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"            if (\"clientRequest\" in logs[l]?.transactionData) {",
					"                var clientRequest = logs[l]?.transactionData.clientRequest;",
					"                if (clientRequest != null && clientRequest?.ws_request_message != null) {",
					"                    newObject = { \"ws_request_message\": clientRequest?.ws_request_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"        }",
					"        return v1Result.concat(v2Refined);",
					"    },",
					"    getWsResponse: function (logs) {",
					"        var v1Result = this.getKey(logs, \"ws_response_message\");",
					"        var logs = this.getTxData(logs);",
					"        var v2Refined = new Array();",
					"        for (l in logs) {",
					"            if (\"serverResponse\" in logs[l]?.transactionData) {",
					"                var serverResponse = logs[l]?.transactionData?.serverResponse;",
					"                if (serverResponse != null && serverResponse?.ws_response_message != null) {",
					"                    newObject = { \"ws_response_message\": serverResponse?.ws_response_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"            if (\"clientResponse\" in logs[l]?.transactionData) {",
					"                var clientResponse = logs[l]?.transactionData?.clientResponse;",
					"                if (clientResponse != null && clientResponse?.ws_response_message != null) {",
					"                    newObject = { \"ws_response_message\": clientResponse?.ws_response_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"        }",
					"        return v1Result.concat(v2Refined);",
					"    },",
					"    testSLA: function (pm, duration) {",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"SLA Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return;",
					"        } ",
					"        pm.test(\"SLA(\" + pm.response.responseTime + \" ms) < \" + duration + \" ms\", function() {",
					"            pm.expect(pm.response.responseTime).to.be.below(duration);",
					"        });",
					"    },",
					"    testTxSLA: function(pm, txData, duration) {",
					"        txData = this.getTxData(txData, true);  // Ensure only txData is checked",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"SLA Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return;",
					"        }",
					"        var counter = 0;",
					"        pm.test(\"transactionData exists in Logs\"), function() {",
					"            pm.expect(txData).to.not.be.eql(null);",
					"            pm.expect(txData.length).to.be.above(0);",
					"        }",
					"        if (txData != null && txData.length > 0) {",
					"            pm.test(\"Transaction \" + (txData.length - 1) + \" SLA(\" + txData[txData.length - 1].transactionData?.elapsedTimeProcessing + \" ms) < \" + duration + \" ms\", ",
					"                function() {",
					"                    pm.expect(txData[txData.length - 1]?.transactionData?.elapsedTimeProcessing).to.be.below(duration);",
					"                }",
					"            );",
					"        }",
					"    },",
					"    getFirstTxEntry: function (txData) {",
					"        // Find the first entry of interest for fault testing and return it.",
					"        // This is needed because there may be some txData entries that are",
					"        // generated by background processes and these can be filtered out.",
					"        for (entry of txData) {",
					"            // Do not test faults in transactionData elements for mock.",
					"            if (entry?.transactionData?.serviceType == \"Mock\") continue;",
					"            // Do not test internal calls for connectivity tests",
					"            if (entry?.method == \"INTERNAL\") continue;",
					"            if (parseInt(entry?.eventId?.split('.')[1]) < 3) continue;",
					"            return entry;",
					"        }",
					"        return null;",
					"    },",
					"    testFault: function(pm, txData, fault, summary, retry) {",
					"        var entry = this.getFirstTxEntry(txData);",
					"        if (entry == null) {",
					"            return;",
					"        }",
					"        pm.test(\"transactionData.faultName == \" + fault, function() {",
					"            pm.expect(entry?.transactionData?.faultName).to.be.eql(fault);",
					"        });",
					"        pm.test(\"transactionData.hasProcessError == true\", function() {",
					"            pm.expect(entry?.transactionData?.hasProcessError).to.be.eql(true);",
					"        });",
					"        pm.test(\"transactionData.processError != null\", function() {",
					"            pm.expect(entry?.transactionData?.processError).to.not.be.eql(null);",
					"        });",
					"        pm.test(\"transactionData.processErrorSummary ~ \" + summary, function() {",
					"            pm.expect(entry?.transactionData?.processErrorSummary.replace(/\\s+/g,\"\")).to.eql(summary);",
					"        });",
					"    },",
					"    testLogs: function (logs, pm, duration, fault, summary, retry) {",
					"        var logTestingCompleted = false;",
					"        var count = 0;",
					"        if (this.isDeployed(pm)) {",
					"            return;",
					"        }",
					"        var txData = this.getTxData(logs);",
					"        if (duration !== undefined && duration > 0) {",
					"            this.testTxSLA(pm, txData, duration);",
					"        }",
					"        if (fault !== undefined) {",
					"            this.testFault(pm, txData, fault, summary, retry);",
					"        }",
					"        if(env !== \"test\"){",
					"        try {",
					"            for (entry of logs) {",
					"                testLogEntry(entry, pm, count++);",
					"            }",
					"            for (entry of txData) {",
					"                pm.test(\"Check Service Type\", function() {",
					"                    pm.expect(entry.transactionData.serviceType).to.match(/Mock|Gateway/);",
					"                    if (entry.requestUri == \"/IISHubService\" || entry.requestUri.includes(\"/rest/\")) {",
					"                        pm.expect(entry.transactionData.serviceType).to.eql(\"Gateway\");",
					"                    } else {",
					"                        pm.expect(entry.transactionData.serviceType).to.eql(\"Mock\");",
					"                    }",
					"                });",
					"            }",
					"            logTestingCompleted = true;",
					"        } catch (error) {",
					"            pm.test(\"Testing log entry \" + (count + 1) + \" of \" + logs.length, function () {",
					"                pm.expect(error, error.message).to.be.eql(null);",
					"            });",
					"        }",
					"        pm.test(\"Tested \" + logs.length + \" log entries\", function () {",
					"            pm.expect(count).to.be.eql(logs.length);",
					"            pm.expect(logTestingCompleted).to.be.eql(true, \"Log Testing Completed\");",
					"        });",
					"        return count;",
					"    }",
					"}",
					"}",
					"",
					"utils = Object.create(Utils);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GoodMessage",
			"value": "MSH|^~\\&amp;|IRIS IIS|IRIS|TEST|TC_04|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|\nQPD|Z34^Request Immunization History^CDCPHINVS|20210330093013LA231|LAMASM77BF4BA6^^^IZGATEWAYTEST&amp;2.16.840.1.113883.40.1&amp;ISO^MR|JohnsonIZG^James^Andrew^^^^L|Leung^Jen^^^^^M|20160414|M|Main Street&amp;&amp;123^^New Orleans^LA^70115^^L|^PRN^PH^^^555^5551111|Y|1",
			"type": "string"
		},
		{
			"key": "GoodResponse",
			"value": ""
		},
		{
			"key": "GoodResponseLF",
			"value": ""
		},
		{
			"key": "GoodResponseCRLF",
			"value": ""
		},
		{
			"key": "GoodMessageLF",
			"value": ""
		},
		{
			"key": "GoodMessageCRLF",
			"value": ""
		},
		{
			"key": "TooLargeMessage",
			"value": ""
		},
		{
			"key": "IisTooLargeMessage",
			"value": ""
		},
		{
			"key": "hex0b",
			"value": ""
		},
		{
			"key": "hex1b",
			"value": ""
		},
		{
			"key": "myIpAddr",
			"value": ""
		},
		{
			"key": "azure-endpoint",
			"value": "azurite",
			"type": "string"
		},
		{
			"key": "dex-endpoint",
			"value": "dex-dev",
			"type": "string"
		}
	]
}